
BlinkLedsTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000294c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08002a0c  08002a0c  00003a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c04  08002c04  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c04  08002c04  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c04  08002c04  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c04  08002c04  00003c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c08  08002c08  00003c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c0c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08002c18  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002c18  000040e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d15  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017a2  00000000  00000000  0000dd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0000f4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ba  00000000  00000000  0000fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012e4c  00000000  00000000  00010212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a190  00000000  00000000  0002305e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000769db  00000000  00000000  0002d1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3bc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000198c  00000000  00000000  000a3c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000a5598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080029f4 	.word	0x080029f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080029f4 	.word	0x080029f4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fb4d 	bl	80008d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f809 	bl	800024e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f926 	bl	800048c <MX_GPIO_Init>
  MX_RTC_Init();
 8000240:	f000 f84c 	bl	80002dc <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000244:	f000 f8ee 	bl	8000424 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //at comands for quectel bg95
	    sendATCommands();
 8000248:	f000 f99c 	bl	8000584 <sendATCommands>
 800024c:	e7fc      	b.n	8000248 <main+0x18>

0800024e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024e:	b590      	push	{r4, r7, lr}
 8000250:	b08d      	sub	sp, #52	@ 0x34
 8000252:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000254:	2414      	movs	r4, #20
 8000256:	193b      	adds	r3, r7, r4
 8000258:	0018      	movs	r0, r3
 800025a:	231c      	movs	r3, #28
 800025c:	001a      	movs	r2, r3
 800025e:	2100      	movs	r1, #0
 8000260:	f002 fb86 	bl	8002970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	003b      	movs	r3, r7
 8000266:	0018      	movs	r0, r3
 8000268:	2314      	movs	r3, #20
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f002 fb7f 	bl	8002970 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000272:	193b      	adds	r3, r7, r4
 8000274:	220a      	movs	r2, #10
 8000276:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	193b      	adds	r3, r7, r4
 800027a:	2280      	movs	r2, #128	@ 0x80
 800027c:	0052      	lsls	r2, r2, #1
 800027e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000280:	193b      	adds	r3, r7, r4
 8000282:	2280      	movs	r2, #128	@ 0x80
 8000284:	0152      	lsls	r2, r2, #5
 8000286:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2240      	movs	r2, #64	@ 0x40
 800028c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800028e:	193b      	adds	r3, r7, r4
 8000290:	2201      	movs	r2, #1
 8000292:	619a      	str	r2, [r3, #24]

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	193b      	adds	r3, r7, r4
 8000296:	0018      	movs	r0, r3
 8000298:	f000 fdfe 	bl	8000e98 <HAL_RCC_OscConfig>
 800029c:	1e03      	subs	r3, r0, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002a0:	f000 fa0a 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	003b      	movs	r3, r7
 80002a6:	2207      	movs	r2, #7
 80002a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002aa:	003b      	movs	r3, r7
 80002ac:	2200      	movs	r2, #0
 80002ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	003b      	movs	r3, r7
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002b6:	003b      	movs	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002bc:	003b      	movs	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c2:	003b      	movs	r3, r7
 80002c4:	2100      	movs	r1, #0
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 ffca 	bl	8001260 <HAL_RCC_ClockConfig>
 80002cc:	1e03      	subs	r3, r0, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80002d0:	f000 f9f2 	bl	80006b8 <Error_Handler>
  }
}
 80002d4:	46c0      	nop			@ (mov r8, r8)
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b00d      	add	sp, #52	@ 0x34
 80002da:	bd90      	pop	{r4, r7, pc}

080002dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b090      	sub	sp, #64	@ 0x40
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002e2:	232c      	movs	r3, #44	@ 0x2c
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	0018      	movs	r0, r3
 80002e8:	2314      	movs	r3, #20
 80002ea:	001a      	movs	r2, r3
 80002ec:	2100      	movs	r1, #0
 80002ee:	f002 fb3f 	bl	8002970 <memset>
  RTC_DateTypeDef sDate = {0};
 80002f2:	2328      	movs	r3, #40	@ 0x28
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80002fa:	003b      	movs	r3, r7
 80002fc:	0018      	movs	r0, r3
 80002fe:	2328      	movs	r3, #40	@ 0x28
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f002 fb34 	bl	8002970 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000308:	4b44      	ldr	r3, [pc, #272]	@ (800041c <MX_RTC_Init+0x140>)
 800030a:	4a45      	ldr	r2, [pc, #276]	@ (8000420 <MX_RTC_Init+0x144>)
 800030c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800030e:	4b43      	ldr	r3, [pc, #268]	@ (800041c <MX_RTC_Init+0x140>)
 8000310:	2200      	movs	r2, #0
 8000312:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000314:	4b41      	ldr	r3, [pc, #260]	@ (800041c <MX_RTC_Init+0x140>)
 8000316:	227f      	movs	r2, #127	@ 0x7f
 8000318:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800031a:	4b40      	ldr	r3, [pc, #256]	@ (800041c <MX_RTC_Init+0x140>)
 800031c:	22ff      	movs	r2, #255	@ 0xff
 800031e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000320:	4b3e      	ldr	r3, [pc, #248]	@ (800041c <MX_RTC_Init+0x140>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000326:	4b3d      	ldr	r3, [pc, #244]	@ (800041c <MX_RTC_Init+0x140>)
 8000328:	2200      	movs	r2, #0
 800032a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800032c:	4b3b      	ldr	r3, [pc, #236]	@ (800041c <MX_RTC_Init+0x140>)
 800032e:	2200      	movs	r2, #0
 8000330:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000332:	4b3a      	ldr	r3, [pc, #232]	@ (800041c <MX_RTC_Init+0x140>)
 8000334:	2280      	movs	r2, #128	@ 0x80
 8000336:	05d2      	lsls	r2, r2, #23
 8000338:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800033a:	4b38      	ldr	r3, [pc, #224]	@ (800041c <MX_RTC_Init+0x140>)
 800033c:	2200      	movs	r2, #0
 800033e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000340:	4b36      	ldr	r3, [pc, #216]	@ (800041c <MX_RTC_Init+0x140>)
 8000342:	0018      	movs	r0, r3
 8000344:	f001 f9e8 	bl	8001718 <HAL_RTC_Init>
 8000348:	1e03      	subs	r3, r0, #0
 800034a:	d001      	beq.n	8000350 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800034c:	f000 f9b4 	bl	80006b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000350:	212c      	movs	r1, #44	@ 0x2c
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	2200      	movs	r2, #0
 800035c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800035e:	187b      	adds	r3, r7, r1
 8000360:	2200      	movs	r2, #0
 8000362:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000364:	187b      	adds	r3, r7, r1
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800036a:	187b      	adds	r3, r7, r1
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000376:	1879      	adds	r1, r7, r1
 8000378:	4b28      	ldr	r3, [pc, #160]	@ (800041c <MX_RTC_Init+0x140>)
 800037a:	2201      	movs	r2, #1
 800037c:	0018      	movs	r0, r3
 800037e:	f001 fa69 	bl	8001854 <HAL_RTC_SetTime>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8000386:	f000 f997 	bl	80006b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800038a:	2128      	movs	r1, #40	@ 0x28
 800038c:	187b      	adds	r3, r7, r1
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000392:	187b      	adds	r3, r7, r1
 8000394:	2201      	movs	r2, #1
 8000396:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2201      	movs	r2, #1
 800039c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2200      	movs	r2, #0
 80003a2:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	4b1d      	ldr	r3, [pc, #116]	@ (800041c <MX_RTC_Init+0x140>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 fafa 	bl	80019a4 <HAL_RTC_SetDate>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80003b4:	f000 f980 	bl	80006b8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80003b8:	003b      	movs	r3, r7
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80003be:	003b      	movs	r3, r7
 80003c0:	2200      	movs	r2, #0
 80003c2:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80003c4:	003b      	movs	r3, r7
 80003c6:	2200      	movs	r2, #0
 80003c8:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80003ca:	003b      	movs	r3, r7
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003d0:	003b      	movs	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003d6:	003b      	movs	r3, r7
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80003dc:	003b      	movs	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80003e2:	003b      	movs	r3, r7
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80003e8:	003b      	movs	r3, r7
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80003ee:	003b      	movs	r3, r7
 80003f0:	2220      	movs	r2, #32
 80003f2:	2101      	movs	r1, #1
 80003f4:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80003f6:	003b      	movs	r3, r7
 80003f8:	2280      	movs	r2, #128	@ 0x80
 80003fa:	0052      	lsls	r2, r2, #1
 80003fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80003fe:	0039      	movs	r1, r7
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <MX_RTC_Init+0x140>)
 8000402:	2201      	movs	r2, #1
 8000404:	0018      	movs	r0, r3
 8000406:	f001 fb5f 	bl	8001ac8 <HAL_RTC_SetAlarm>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800040e:	f000 f953 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b010      	add	sp, #64	@ 0x40
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	20000028 	.word	0x20000028
 8000420:	40002800 	.word	0x40002800

08000424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000428:	4b16      	ldr	r3, [pc, #88]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 800042a:	4a17      	ldr	r2, [pc, #92]	@ (8000488 <MX_USART2_UART_Init+0x64>)
 800042c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800042e:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 8000430:	22e1      	movs	r2, #225	@ 0xe1
 8000432:	0252      	lsls	r2, r2, #9
 8000434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000442:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b0b      	ldr	r3, [pc, #44]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800045a:	4b0a      	ldr	r3, [pc, #40]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000460:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 8000462:	2200      	movs	r2, #0
 8000464:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000466:	4b07      	ldr	r3, [pc, #28]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 8000468:	2200      	movs	r2, #0
 800046a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800046c:	4b05      	ldr	r3, [pc, #20]	@ (8000484 <MX_USART2_UART_Init+0x60>)
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fcf2 	bl	8001e58 <HAL_UART_Init>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000478:	f000 f91e 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	20000050 	.word	0x20000050
 8000488:	40004400 	.word	0x40004400

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b089      	sub	sp, #36	@ 0x24
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	240c      	movs	r4, #12
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	2314      	movs	r3, #20
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f002 fa67 	bl	8002970 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <MX_GPIO_Init+0x98>)
 80004a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000524 <MX_GPIO_Init+0x98>)
 80004a8:	2102      	movs	r1, #2
 80004aa:	430a      	orrs	r2, r1
 80004ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80004ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000524 <MX_GPIO_Init+0x98>)
 80004b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004b2:	2202      	movs	r2, #2
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000524 <MX_GPIO_Init+0x98>)
 80004bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004be:	4b19      	ldr	r3, [pc, #100]	@ (8000524 <MX_GPIO_Init+0x98>)
 80004c0:	2104      	movs	r1, #4
 80004c2:	430a      	orrs	r2, r1
 80004c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004c6:	4b17      	ldr	r3, [pc, #92]	@ (8000524 <MX_GPIO_Init+0x98>)
 80004c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ca:	2204      	movs	r2, #4
 80004cc:	4013      	ands	r3, r2
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b14      	ldr	r3, [pc, #80]	@ (8000524 <MX_GPIO_Init+0x98>)
 80004d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004d6:	4b13      	ldr	r3, [pc, #76]	@ (8000524 <MX_GPIO_Init+0x98>)
 80004d8:	2101      	movs	r1, #1
 80004da:	430a      	orrs	r2, r1
 80004dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80004de:	4b11      	ldr	r3, [pc, #68]	@ (8000524 <MX_GPIO_Init+0x98>)
 80004e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PINO_LED2_Pin|PINO_LED1_Pin, GPIO_PIN_RESET);
 80004ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000528 <MX_GPIO_Init+0x9c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	21c0      	movs	r1, #192	@ 0xc0
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fcb3 	bl	8000e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PINO_LED2_Pin PINO_LED1_Pin */
  GPIO_InitStruct.Pin = PINO_LED2_Pin|PINO_LED1_Pin;
 80004f6:	0021      	movs	r1, r4
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	22c0      	movs	r2, #192	@ 0xc0
 80004fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2201      	movs	r2, #1
 8000502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000510:	187b      	adds	r3, r7, r1
 8000512:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <MX_GPIO_Init+0x9c>)
 8000514:	0019      	movs	r1, r3
 8000516:	0010      	movs	r0, r2
 8000518:	f000 fb36 	bl	8000b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	b009      	add	sp, #36	@ 0x24
 8000522:	bd90      	pop	{r4, r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	50000400 	.word	0x50000400

0800052c <sendATCommand>:

/* USER CODE BEGIN 4 */
void sendATCommand(char* command, char* expectedResponse) {
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b0a3      	sub	sp, #140	@ 0x8c
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
    uint8_t rxBuffer[128]; // Buffer to store received data
    memset(rxBuffer, 0, sizeof(rxBuffer));
 8000536:	2408      	movs	r4, #8
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2280      	movs	r2, #128	@ 0x80
 800053c:	2100      	movs	r1, #0
 800053e:	0018      	movs	r0, r3
 8000540:	f002 fa16 	bl	8002970 <memset>

    // Send the command
    HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), TIMEOUT);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff fdde 	bl	8000108 <strlen>
 800054c:	0003      	movs	r3, r0
 800054e:	b29a      	uxth	r2, r3
 8000550:	23fa      	movs	r3, #250	@ 0xfa
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	480a      	ldr	r0, [pc, #40]	@ (8000580 <sendATCommand+0x54>)
 8000558:	f001 fcd4 	bl	8001f04 <HAL_UART_Transmit>

    // Wait for response
    HAL_UART_Receive(&huart2, rxBuffer, sizeof(rxBuffer), TIMEOUT);
 800055c:	23fa      	movs	r3, #250	@ 0xfa
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	1939      	adds	r1, r7, r4
 8000562:	4807      	ldr	r0, [pc, #28]	@ (8000580 <sendATCommand+0x54>)
 8000564:	2280      	movs	r2, #128	@ 0x80
 8000566:	f001 fd71 	bl	800204c <HAL_UART_Receive>

    // Check if the expected response is in the received data
    if (strstr((char*)rxBuffer, expectedResponse) != NULL) {
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	193b      	adds	r3, r7, r4
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fa05 	bl	8002980 <strstr>
        // Response received correctly
    } else {
        // Handle the error or unexpected response
    }
}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b023      	add	sp, #140	@ 0x8c
 800057c:	bd90      	pop	{r4, r7, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	20000050 	.word	0x20000050

08000584 <sendATCommands>:

void sendATCommands() {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    sendATCommand("AT\r\n", "OK");                                 // Check communication
 8000588:	4a34      	ldr	r2, [pc, #208]	@ (800065c <sendATCommands+0xd8>)
 800058a:	4b35      	ldr	r3, [pc, #212]	@ (8000660 <sendATCommands+0xdc>)
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff ffcc 	bl	800052c <sendATCommand>
    sendATCommand("AT+CCID\r\n", "+CCID");                         // Get CCID
 8000594:	4a33      	ldr	r2, [pc, #204]	@ (8000664 <sendATCommands+0xe0>)
 8000596:	4b34      	ldr	r3, [pc, #208]	@ (8000668 <sendATCommands+0xe4>)
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f7ff ffc6 	bl	800052c <sendATCommand>
    sendATCommand("AT+CIMI\r\n", "724");                           // Get IMSI
 80005a0:	4a32      	ldr	r2, [pc, #200]	@ (800066c <sendATCommands+0xe8>)
 80005a2:	4b33      	ldr	r3, [pc, #204]	@ (8000670 <sendATCommands+0xec>)
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f7ff ffc0 	bl	800052c <sendATCommand>
    sendATCommand("AT+CFUN=0\r\n", "OK");                          // Set the functionality
 80005ac:	4a2b      	ldr	r2, [pc, #172]	@ (800065c <sendATCommands+0xd8>)
 80005ae:	4b31      	ldr	r3, [pc, #196]	@ (8000674 <sendATCommands+0xf0>)
 80005b0:	0011      	movs	r1, r2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f7ff ffba 	bl	800052c <sendATCommand>
    sendATCommand("AT+QCFG=\"nwscanmode\",0,1\r\n", "OK");         // Configure network scan mode
 80005b8:	4a28      	ldr	r2, [pc, #160]	@ (800065c <sendATCommands+0xd8>)
 80005ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000678 <sendATCommands+0xf4>)
 80005bc:	0011      	movs	r1, r2
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ffb4 	bl	800052c <sendATCommand>
    sendATCommand("AT+QCFG=\"nwscanseq\",020103,1\r\n", "OK");     // Configure network scan sequence
 80005c4:	4a25      	ldr	r2, [pc, #148]	@ (800065c <sendATCommands+0xd8>)
 80005c6:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <sendATCommands+0xf8>)
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff ffae 	bl	800052c <sendATCommand>
    sendATCommand("AT+QCFG=\"band\",0,0\r\n", "OK");               // Configure band
 80005d0:	4a22      	ldr	r2, [pc, #136]	@ (800065c <sendATCommands+0xd8>)
 80005d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000680 <sendATCommands+0xfc>)
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ffa8 	bl	800052c <sendATCommand>
    sendATCommand("AT+COPS=0\r\n", "OK");                          // Automatically select operator
 80005dc:	4a1f      	ldr	r2, [pc, #124]	@ (800065c <sendATCommands+0xd8>)
 80005de:	4b29      	ldr	r3, [pc, #164]	@ (8000684 <sendATCommands+0x100>)
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff ffa2 	bl	800052c <sendATCommand>
    sendATCommand("AT+CGDCONT=1,\"IP\",\"gprs.oi.com.br\"\r\n", "OK");  // Set PDP context
 80005e8:	4a1c      	ldr	r2, [pc, #112]	@ (800065c <sendATCommands+0xd8>)
 80005ea:	4b27      	ldr	r3, [pc, #156]	@ (8000688 <sendATCommands+0x104>)
 80005ec:	0011      	movs	r1, r2
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff9c 	bl	800052c <sendATCommand>
    sendATCommand("AT+CFUN=1\r\n", "OK");                          // Set the functionality
 80005f4:	4a19      	ldr	r2, [pc, #100]	@ (800065c <sendATCommands+0xd8>)
 80005f6:	4b25      	ldr	r3, [pc, #148]	@ (800068c <sendATCommands+0x108>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff ff96 	bl	800052c <sendATCommand>
    sendATCommand("AT+CREG=1;+CGREG=1;+CEREG=1\r\n", "OK");        // Enable network registration reporting
 8000600:	4a16      	ldr	r2, [pc, #88]	@ (800065c <sendATCommands+0xd8>)
 8000602:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <sendATCommands+0x10c>)
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff ff90 	bl	800052c <sendATCommand>
    sendATCommand("AT+COPS?\r\n", "+COPS");                        // Query operator selection
 800060c:	4a21      	ldr	r2, [pc, #132]	@ (8000694 <sendATCommands+0x110>)
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <sendATCommands+0x114>)
 8000610:	0011      	movs	r1, r2
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff ff8a 	bl	800052c <sendATCommand>
    sendATCommand("AT+QCSQ\r\n", "+QCSQ");                         // Query signal quality
 8000618:	4a20      	ldr	r2, [pc, #128]	@ (800069c <sendATCommands+0x118>)
 800061a:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <sendATCommands+0x11c>)
 800061c:	0011      	movs	r1, r2
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff ff84 	bl	800052c <sendATCommand>
    sendATCommand("AT+CREG?;+CEREG?;+CGREG?\r\n", "OK");           // Query network registration status
 8000624:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <sendATCommands+0xd8>)
 8000626:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <sendATCommands+0x120>)
 8000628:	0011      	movs	r1, r2
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff ff7e 	bl	800052c <sendATCommand>
    sendATCommand("AT+CGATT=1\r\n", "OK");                         // Attach to GPRS service
 8000630:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <sendATCommands+0xd8>)
 8000632:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <sendATCommands+0x124>)
 8000634:	0011      	movs	r1, r2
 8000636:	0018      	movs	r0, r3
 8000638:	f7ff ff78 	bl	800052c <sendATCommand>
    sendATCommand("AT+CGPADDR\r\n", "+CGPADDR");                   // Show PDP address
 800063c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ac <sendATCommands+0x128>)
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <sendATCommands+0x12c>)
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff ff72 	bl	800052c <sendATCommand>
    sendATCommand("AT+QPING=1,\"100.88.219.135\"\r\n", "OK");      // Ping a specified IP address
 8000648:	4a04      	ldr	r2, [pc, #16]	@ (800065c <sendATCommands+0xd8>)
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <sendATCommands+0x130>)
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff ff6c 	bl	800052c <sendATCommand>
}
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	08002a0c 	.word	0x08002a0c
 8000660:	08002a10 	.word	0x08002a10
 8000664:	08002a18 	.word	0x08002a18
 8000668:	08002a20 	.word	0x08002a20
 800066c:	08002a2c 	.word	0x08002a2c
 8000670:	08002a30 	.word	0x08002a30
 8000674:	08002a3c 	.word	0x08002a3c
 8000678:	08002a48 	.word	0x08002a48
 800067c:	08002a64 	.word	0x08002a64
 8000680:	08002a84 	.word	0x08002a84
 8000684:	08002a9c 	.word	0x08002a9c
 8000688:	08002aa8 	.word	0x08002aa8
 800068c:	08002ad0 	.word	0x08002ad0
 8000690:	08002adc 	.word	0x08002adc
 8000694:	08002afc 	.word	0x08002afc
 8000698:	08002b04 	.word	0x08002b04
 800069c:	08002b10 	.word	0x08002b10
 80006a0:	08002b18 	.word	0x08002b18
 80006a4:	08002b24 	.word	0x08002b24
 80006a8:	08002b40 	.word	0x08002b40
 80006ac:	08002b50 	.word	0x08002b50
 80006b0:	08002b5c 	.word	0x08002b5c
 80006b4:	08002b6c 	.word	0x08002b6c

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	e7fd      	b.n	80006c0 <Error_Handler+0x8>

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <HAL_MspInit+0x54>)
 80006cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006ce:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <HAL_MspInit+0x54>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	430a      	orrs	r2, r1
 80006d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <HAL_MspInit+0x54>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006da:	2201      	movs	r2, #1
 80006dc:	4013      	ands	r3, r2
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <HAL_MspInit+0x54>)
 80006e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <HAL_MspInit+0x54>)
 80006e8:	2180      	movs	r1, #128	@ 0x80
 80006ea:	0549      	lsls	r1, r1, #21
 80006ec:	430a      	orrs	r2, r1
 80006ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <HAL_MspInit+0x54>)
 80006f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006f4:	2380      	movs	r3, #128	@ 0x80
 80006f6:	055b      	lsls	r3, r3, #21
 80006f8:	4013      	ands	r3, r2
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2004      	movs	r0, #4
 8000704:	f000 fa0e 	bl	8000b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000708:	2004      	movs	r0, #4
 800070a:	f000 fa20 	bl	8000b4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b08b      	sub	sp, #44	@ 0x2c
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000724:	240c      	movs	r4, #12
 8000726:	193b      	adds	r3, r7, r4
 8000728:	0018      	movs	r0, r3
 800072a:	231c      	movs	r3, #28
 800072c:	001a      	movs	r2, r3
 800072e:	2100      	movs	r1, #0
 8000730:	f002 f91e 	bl	8002970 <memset>
  if(hrtc->Instance==RTC)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <HAL_RTC_MspInit+0x74>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d124      	bne.n	8000788 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2280      	movs	r2, #128	@ 0x80
 8000742:	0292      	lsls	r2, r2, #10
 8000744:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800074e:	193b      	adds	r3, r7, r4
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fef3 	bl	800153c <HAL_RCCEx_PeriphCLKConfig>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800075a:	f7ff ffad 	bl	80006b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <HAL_RTC_MspInit+0x78>)
 8000760:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000762:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <HAL_RTC_MspInit+0x78>)
 8000764:	2180      	movs	r1, #128	@ 0x80
 8000766:	0209      	lsls	r1, r1, #8
 8000768:	430a      	orrs	r2, r1
 800076a:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <HAL_RTC_MspInit+0x78>)
 800076e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <HAL_RTC_MspInit+0x78>)
 8000772:	2180      	movs	r1, #128	@ 0x80
 8000774:	00c9      	lsls	r1, r1, #3
 8000776:	430a      	orrs	r2, r1
 8000778:	63da      	str	r2, [r3, #60]	@ 0x3c
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_RTC_MspInit+0x78>)
 800077c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800077e:	2380      	movs	r3, #128	@ 0x80
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	4013      	ands	r3, r2
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b00b      	add	sp, #44	@ 0x2c
 800078e:	bd90      	pop	{r4, r7, pc}
 8000790:	40002800 	.word	0x40002800
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b08b      	sub	sp, #44	@ 0x2c
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	2414      	movs	r4, #20
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	2314      	movs	r3, #20
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f002 f8e0 	bl	8002970 <memset>
  if(huart->Instance==USART2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000824 <HAL_UART_MspInit+0x8c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d130      	bne.n	800081c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <HAL_UART_MspInit+0x90>)
 80007bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <HAL_UART_MspInit+0x90>)
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	0289      	lsls	r1, r1, #10
 80007c4:	430a      	orrs	r2, r1
 80007c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <HAL_UART_MspInit+0x90>)
 80007ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007cc:	2380      	movs	r3, #128	@ 0x80
 80007ce:	029b      	lsls	r3, r3, #10
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <HAL_UART_MspInit+0x90>)
 80007d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007da:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <HAL_UART_MspInit+0x90>)
 80007dc:	2101      	movs	r1, #1
 80007de:	430a      	orrs	r2, r1
 80007e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <HAL_UART_MspInit+0x90>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007e6:	2201      	movs	r2, #1
 80007e8:	4013      	ands	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007ee:	0021      	movs	r1, r4
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	220c      	movs	r2, #12
 80007f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2202      	movs	r2, #2
 80007fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2201      	movs	r2, #1
 800080c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	187a      	adds	r2, r7, r1
 8000810:	23a0      	movs	r3, #160	@ 0xa0
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f000 f9b6 	bl	8000b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b00b      	add	sp, #44	@ 0x2c
 8000822:	bd90      	pop	{r4, r7, pc}
 8000824:	40004400 	.word	0x40004400
 8000828:	40021000 	.word	0x40021000

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000830:	46c0      	nop			@ (mov r8, r8)
 8000832:	e7fd      	b.n	8000830 <NMI_Handler+0x4>

08000834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	e7fd      	b.n	8000838 <HardFault_Handler+0x4>

0800083c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000854:	f000 f89e 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000858:	46c0      	nop			@ (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800086c:	4b03      	ldr	r3, [pc, #12]	@ (800087c <SystemInit+0x14>)
 800086e:	2280      	movs	r2, #128	@ 0x80
 8000870:	0512      	lsls	r2, r2, #20
 8000872:	609a      	str	r2, [r3, #8]
#endif
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000880:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000882:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000884:	f7ff fff0 	bl	8000868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000888:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800088a:	e003      	b.n	8000894 <LoopCopyDataInit>

0800088c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800088c:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800088e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000890:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000892:	3104      	adds	r1, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000894:	480a      	ldr	r0, [pc, #40]	@ (80008c0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000898:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800089a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800089c:	d3f6      	bcc.n	800088c <CopyDataInit>
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <LoopForever+0x12>)
  b LoopFillZerobss
 80008a0:	e002      	b.n	80008a8 <LoopFillZerobss>

080008a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  str  r3, [r2]
 80008a4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a6:	3204      	adds	r2, #4

080008a8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <LoopForever+0x16>)
  cmp r2, r3
 80008aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008ac:	d3f9      	bcc.n	80008a2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80008ae:	f002 f87d 	bl	80029ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fcbd 	bl	8000230 <main>

080008b6 <LoopForever>:

LoopForever:
    b LoopForever
 80008b6:	e7fe      	b.n	80008b6 <LoopForever>
  ldr   r0, =_estack
 80008b8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80008bc:	08002c0c 	.word	0x08002c0c
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80008c8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008cc:	200000e8 	.word	0x200000e8

080008d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_IRQHandler>

080008d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008de:	2003      	movs	r0, #3
 80008e0:	f000 f80e 	bl	8000900 <HAL_InitTick>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d003      	beq.n	80008f0 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e001      	b.n	80008f4 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f0:	f7ff fee8 	bl	80006c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
}
 80008f8:	0018      	movs	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b002      	add	sp, #8
 80008fe:	bd80      	pop	{r7, pc}

08000900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000908:	230f      	movs	r3, #15
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000910:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <HAL_InitTick+0x88>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d02b      	beq.n	8000970 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <HAL_InitTick+0x8c>)
 800091a:	681c      	ldr	r4, [r3, #0]
 800091c:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <HAL_InitTick+0x88>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	0019      	movs	r1, r3
 8000922:	23fa      	movs	r3, #250	@ 0xfa
 8000924:	0098      	lsls	r0, r3, #2
 8000926:	f7ff fbf7 	bl	8000118 <__udivsi3>
 800092a:	0003      	movs	r3, r0
 800092c:	0019      	movs	r1, r3
 800092e:	0020      	movs	r0, r4
 8000930:	f7ff fbf2 	bl	8000118 <__udivsi3>
 8000934:	0003      	movs	r3, r0
 8000936:	0018      	movs	r0, r3
 8000938:	f000 f919 	bl	8000b6e <HAL_SYSTICK_Config>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d112      	bne.n	8000966 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d80a      	bhi.n	800095c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	2301      	movs	r3, #1
 800094a:	425b      	negs	r3, r3
 800094c:	2200      	movs	r2, #0
 800094e:	0018      	movs	r0, r3
 8000950:	f000 f8e8 	bl	8000b24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <HAL_InitTick+0x90>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	e00d      	b.n	8000978 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800095c:	230f      	movs	r3, #15
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e008      	b.n	8000978 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000966:	230f      	movs	r3, #15
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	2201      	movs	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	e003      	b.n	8000978 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000970:	230f      	movs	r3, #15
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000978:	230f      	movs	r3, #15
 800097a:	18fb      	adds	r3, r7, r3
 800097c:	781b      	ldrb	r3, [r3, #0]
}
 800097e:	0018      	movs	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	b005      	add	sp, #20
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	20000008 	.word	0x20000008
 800098c:	20000000 	.word	0x20000000
 8000990:	20000004 	.word	0x20000004

08000994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000998:	4b05      	ldr	r3, [pc, #20]	@ (80009b0 <HAL_IncTick+0x1c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	001a      	movs	r2, r3
 800099e:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <HAL_IncTick+0x20>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	18d2      	adds	r2, r2, r3
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <HAL_IncTick+0x20>)
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	20000008 	.word	0x20000008
 80009b4:	200000e4 	.word	0x200000e4

080009b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b02      	ldr	r3, [pc, #8]	@ (80009c8 <HAL_GetTick+0x10>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	0018      	movs	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	200000e4 	.word	0x200000e4

080009cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	0002      	movs	r2, r0
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	1dfb      	adds	r3, r7, #7
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80009de:	d809      	bhi.n	80009f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009e0:	1dfb      	adds	r3, r7, #7
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	001a      	movs	r2, r3
 80009e6:	231f      	movs	r3, #31
 80009e8:	401a      	ands	r2, r3
 80009ea:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <__NVIC_EnableIRQ+0x30>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	4091      	lsls	r1, r2
 80009f0:	000a      	movs	r2, r1
 80009f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	0002      	movs	r2, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	1dfb      	adds	r3, r7, #7
 8000a0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a14:	d828      	bhi.n	8000a68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a16:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad4 <__NVIC_SetPriority+0xd4>)
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b25b      	sxtb	r3, r3
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	33c0      	adds	r3, #192	@ 0xc0
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	589b      	ldr	r3, [r3, r2]
 8000a26:	1dfa      	adds	r2, r7, #7
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	400a      	ands	r2, r1
 8000a30:	00d2      	lsls	r2, r2, #3
 8000a32:	21ff      	movs	r1, #255	@ 0xff
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	019b      	lsls	r3, r3, #6
 8000a42:	22ff      	movs	r2, #255	@ 0xff
 8000a44:	401a      	ands	r2, r3
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	4003      	ands	r3, r0
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a54:	481f      	ldr	r0, [pc, #124]	@ (8000ad4 <__NVIC_SetPriority+0xd4>)
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b25b      	sxtb	r3, r3
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	33c0      	adds	r3, #192	@ 0xc0
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a66:	e031      	b.n	8000acc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <__NVIC_SetPriority+0xd8>)
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0019      	movs	r1, r3
 8000a70:	230f      	movs	r3, #15
 8000a72:	400b      	ands	r3, r1
 8000a74:	3b08      	subs	r3, #8
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3306      	adds	r3, #6
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	18d3      	adds	r3, r2, r3
 8000a7e:	3304      	adds	r3, #4
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1dfa      	adds	r2, r7, #7
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	0011      	movs	r1, r2
 8000a88:	2203      	movs	r2, #3
 8000a8a:	400a      	ands	r2, r1
 8000a8c:	00d2      	lsls	r2, r2, #3
 8000a8e:	21ff      	movs	r1, #255	@ 0xff
 8000a90:	4091      	lsls	r1, r2
 8000a92:	000a      	movs	r2, r1
 8000a94:	43d2      	mvns	r2, r2
 8000a96:	401a      	ands	r2, r3
 8000a98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	22ff      	movs	r2, #255	@ 0xff
 8000aa0:	401a      	ands	r2, r3
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	4003      	ands	r3, r0
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <__NVIC_SetPriority+0xd8>)
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	001c      	movs	r4, r3
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4023      	ands	r3, r4
 8000abc:	3b08      	subs	r3, #8
 8000abe:	089b      	lsrs	r3, r3, #2
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	3306      	adds	r3, #6
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	18c3      	adds	r3, r0, r3
 8000ac8:	3304      	adds	r3, #4
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	1e5a      	subs	r2, r3, #1
 8000ae8:	2380      	movs	r3, #128	@ 0x80
 8000aea:	045b      	lsls	r3, r3, #17
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d301      	bcc.n	8000af4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af0:	2301      	movs	r3, #1
 8000af2:	e010      	b.n	8000b16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <SysTick_Config+0x44>)
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	3a01      	subs	r2, #1
 8000afa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afc:	2301      	movs	r3, #1
 8000afe:	425b      	negs	r3, r3
 8000b00:	2103      	movs	r1, #3
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ff7c 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <SysTick_Config+0x44>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	@ (8000b20 <SysTick_Config+0x44>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	210f      	movs	r1, #15
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	1c02      	adds	r2, r0, #0
 8000b34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	b25b      	sxtb	r3, r3
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b004      	add	sp, #16
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	0002      	movs	r2, r0
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff ff33 	bl	80009cc <__NVIC_EnableIRQ>
}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ffaf 	bl	8000adc <SysTick_Config>
 8000b7e:	0003      	movs	r3, r0
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b96:	e14d      	b.n	8000e34 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4091      	lsls	r1, r2
 8000ba2:	000a      	movs	r2, r1
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d100      	bne.n	8000bb0 <HAL_GPIO_Init+0x28>
 8000bae:	e13e      	b.n	8000e2e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x38>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	2b12      	cmp	r3, #18
 8000bbe:	d125      	bne.n	8000c0c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	08da      	lsrs	r2, r3, #3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3208      	adds	r2, #8
 8000bc8:	0092      	lsls	r2, r2, #2
 8000bca:	58d3      	ldr	r3, [r2, r3]
 8000bcc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	0013      	movs	r3, r2
 8000bdc:	43da      	mvns	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	4013      	ands	r3, r2
 8000be2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	220f      	movs	r2, #15
 8000bea:	401a      	ands	r2, r3
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	2107      	movs	r1, #7
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	0013      	movs	r3, r2
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	08da      	lsrs	r2, r3, #3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3208      	adds	r2, #8
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	6979      	ldr	r1, [r7, #20]
 8000c0a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	2203      	movs	r2, #3
 8000c18:	409a      	lsls	r2, r3
 8000c1a:	0013      	movs	r3, r2
 8000c1c:	43da      	mvns	r2, r3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	4013      	ands	r3, r2
 8000c22:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	409a      	lsls	r2, r3
 8000c32:	0013      	movs	r3, r2
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d00b      	beq.n	8000c60 <HAL_GPIO_Init+0xd8>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d007      	beq.n	8000c60 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c54:	2b11      	cmp	r3, #17
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b12      	cmp	r3, #18
 8000c5e:	d130      	bne.n	8000cc2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	409a      	lsls	r2, r3
 8000c6e:	0013      	movs	r3, r2
 8000c70:	43da      	mvns	r2, r3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	4013      	ands	r3, r2
 8000c76:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	68da      	ldr	r2, [r3, #12]
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	409a      	lsls	r2, r3
 8000c82:	0013      	movs	r3, r2
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c96:	2201      	movs	r2, #1
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	091b      	lsrs	r3, r3, #4
 8000cac:	2201      	movs	r2, #1
 8000cae:	401a      	ands	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d017      	beq.n	8000cfa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	43da      	mvns	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	409a      	lsls	r2, r3
 8000cec:	0013      	movs	r3, r2
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	2380      	movs	r3, #128	@ 0x80
 8000d00:	055b      	lsls	r3, r3, #21
 8000d02:	4013      	ands	r3, r2
 8000d04:	d100      	bne.n	8000d08 <HAL_GPIO_Init+0x180>
 8000d06:	e092      	b.n	8000e2e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000d08:	4a50      	ldr	r2, [pc, #320]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3318      	adds	r3, #24
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	589b      	ldr	r3, [r3, r2]
 8000d14:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2203      	movs	r2, #3
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	220f      	movs	r2, #15
 8000d20:	409a      	lsls	r2, r3
 8000d22:	0013      	movs	r3, r2
 8000d24:	43da      	mvns	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	23a0      	movs	r3, #160	@ 0xa0
 8000d30:	05db      	lsls	r3, r3, #23
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d013      	beq.n	8000d5e <HAL_GPIO_Init+0x1d6>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a45      	ldr	r2, [pc, #276]	@ (8000e50 <HAL_GPIO_Init+0x2c8>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d00d      	beq.n	8000d5a <HAL_GPIO_Init+0x1d2>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a44      	ldr	r2, [pc, #272]	@ (8000e54 <HAL_GPIO_Init+0x2cc>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d007      	beq.n	8000d56 <HAL_GPIO_Init+0x1ce>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a43      	ldr	r2, [pc, #268]	@ (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_GPIO_Init+0x1ca>
 8000d4e:	2305      	movs	r3, #5
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x1d8>
 8000d52:	2306      	movs	r3, #6
 8000d54:	e004      	b.n	8000d60 <HAL_GPIO_Init+0x1d8>
 8000d56:	2302      	movs	r3, #2
 8000d58:	e002      	b.n	8000d60 <HAL_GPIO_Init+0x1d8>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <HAL_GPIO_Init+0x1d8>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	2103      	movs	r1, #3
 8000d64:	400a      	ands	r2, r1
 8000d66:	00d2      	lsls	r2, r2, #3
 8000d68:	4093      	lsls	r3, r2
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000d70:	4936      	ldr	r1, [pc, #216]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	089b      	lsrs	r3, r3, #2
 8000d76:	3318      	adds	r3, #24
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000d7e:	4a33      	ldr	r2, [pc, #204]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000d80:	2380      	movs	r3, #128	@ 0x80
 8000d82:	58d3      	ldr	r3, [r2, r3]
 8000d84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43da      	mvns	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	2380      	movs	r3, #128	@ 0x80
 8000d96:	025b      	lsls	r3, r3, #9
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000da4:	4929      	ldr	r1, [pc, #164]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000da6:	2280      	movs	r2, #128	@ 0x80
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000dac:	4a27      	ldr	r2, [pc, #156]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000dae:	2384      	movs	r3, #132	@ 0x84
 8000db0:	58d3      	ldr	r3, [r2, r3]
 8000db2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43da      	mvns	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	2380      	movs	r3, #128	@ 0x80
 8000dc4:	029b      	lsls	r3, r3, #10
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000dd2:	491e      	ldr	r1, [pc, #120]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000dd4:	2284      	movs	r2, #132	@ 0x84
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	43da      	mvns	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	4013      	ands	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	2380      	movs	r3, #128	@ 0x80
 8000df0:	035b      	lsls	r3, r3, #13
 8000df2:	4013      	ands	r3, r2
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000e00:	697a      	ldr	r2, [r7, #20]
 8000e02:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	43da      	mvns	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	4013      	ands	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685a      	ldr	r2, [r3, #4]
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	039b      	lsls	r3, r3, #14
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d003      	beq.n	8000e28 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <HAL_GPIO_Init+0x2c4>)
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	3301      	adds	r3, #1
 8000e32:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	40da      	lsrs	r2, r3
 8000e3c:	1e13      	subs	r3, r2, #0
 8000e3e:	d000      	beq.n	8000e42 <HAL_GPIO_Init+0x2ba>
 8000e40:	e6aa      	b.n	8000b98 <HAL_GPIO_Init+0x10>
  }
}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	46c0      	nop			@ (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b006      	add	sp, #24
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021800 	.word	0x40021800
 8000e50:	50000400 	.word	0x50000400
 8000e54:	50000800 	.word	0x50000800
 8000e58:	50001400 	.word	0x50001400

08000e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	0008      	movs	r0, r1
 8000e66:	0011      	movs	r1, r2
 8000e68:	1cbb      	adds	r3, r7, #2
 8000e6a:	1c02      	adds	r2, r0, #0
 8000e6c:	801a      	strh	r2, [r3, #0]
 8000e6e:	1c7b      	adds	r3, r7, #1
 8000e70:	1c0a      	adds	r2, r1, #0
 8000e72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e74:	1c7b      	adds	r3, r7, #1
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d004      	beq.n	8000e86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e7c:	1cbb      	adds	r3, r7, #2
 8000e7e:	881a      	ldrh	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e84:	e003      	b.n	8000e8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e86:	1cbb      	adds	r3, r7, #2
 8000e88:	881a      	ldrh	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e1d0      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d100      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x1e>
 8000eb4:	e069      	b.n	8000f8a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb6:	4bc8      	ldr	r3, [pc, #800]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2238      	movs	r2, #56	@ 0x38
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d105      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d15d      	bne.n	8000f8a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e1bc      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	2380      	movs	r3, #128	@ 0x80
 8000ed8:	025b      	lsls	r3, r3, #9
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d107      	bne.n	8000eee <HAL_RCC_OscConfig+0x56>
 8000ede:	4bbe      	ldr	r3, [pc, #760]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4bbd      	ldr	r3, [pc, #756]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000ee4:	2180      	movs	r1, #128	@ 0x80
 8000ee6:	0249      	lsls	r1, r1, #9
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e020      	b.n	8000f30 <HAL_RCC_OscConfig+0x98>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685a      	ldr	r2, [r3, #4]
 8000ef2:	23a0      	movs	r3, #160	@ 0xa0
 8000ef4:	02db      	lsls	r3, r3, #11
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d10e      	bne.n	8000f18 <HAL_RCC_OscConfig+0x80>
 8000efa:	4bb7      	ldr	r3, [pc, #732]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4bb6      	ldr	r3, [pc, #728]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000f00:	2180      	movs	r1, #128	@ 0x80
 8000f02:	02c9      	lsls	r1, r1, #11
 8000f04:	430a      	orrs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	4bb3      	ldr	r3, [pc, #716]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4bb2      	ldr	r3, [pc, #712]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e00b      	b.n	8000f30 <HAL_RCC_OscConfig+0x98>
 8000f18:	4baf      	ldr	r3, [pc, #700]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4bae      	ldr	r3, [pc, #696]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000f1e:	49af      	ldr	r1, [pc, #700]	@ (80011dc <HAL_RCC_OscConfig+0x344>)
 8000f20:	400a      	ands	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	4bac      	ldr	r3, [pc, #688]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4bab      	ldr	r3, [pc, #684]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000f2a:	49ad      	ldr	r1, [pc, #692]	@ (80011e0 <HAL_RCC_OscConfig+0x348>)
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d014      	beq.n	8000f62 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f38:	f7ff fd3e 	bl	80009b8 <HAL_GetTick>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f42:	f7ff fd39 	bl	80009b8 <HAL_GetTick>
 8000f46:	0002      	movs	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b64      	cmp	r3, #100	@ 0x64
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e17b      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f54:	4ba0      	ldr	r3, [pc, #640]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2380      	movs	r3, #128	@ 0x80
 8000f5a:	029b      	lsls	r3, r3, #10
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d0f0      	beq.n	8000f42 <HAL_RCC_OscConfig+0xaa>
 8000f60:	e013      	b.n	8000f8a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f62:	f7ff fd29 	bl	80009b8 <HAL_GetTick>
 8000f66:	0003      	movs	r3, r0
 8000f68:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fd24 	bl	80009b8 <HAL_GetTick>
 8000f70:	0002      	movs	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	@ 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e166      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f7e:	4b96      	ldr	r3, [pc, #600]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	029b      	lsls	r3, r3, #10
 8000f86:	4013      	ands	r3, r2
 8000f88:	d1f0      	bne.n	8000f6c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2202      	movs	r2, #2
 8000f90:	4013      	ands	r3, r2
 8000f92:	d100      	bne.n	8000f96 <HAL_RCC_OscConfig+0xfe>
 8000f94:	e086      	b.n	80010a4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f96:	4b90      	ldr	r3, [pc, #576]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2238      	movs	r2, #56	@ 0x38
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d12f      	bne.n	8001006 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d101      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e14c      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	4b89      	ldr	r3, [pc, #548]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4a8b      	ldr	r2, [pc, #556]	@ (80011e4 <HAL_RCC_OscConfig+0x34c>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	0019      	movs	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	021a      	lsls	r2, r3, #8
 8000fc2:	4b85      	ldr	r3, [pc, #532]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d112      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000fce:	4b82      	ldr	r3, [pc, #520]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a85      	ldr	r2, [pc, #532]	@ (80011e8 <HAL_RCC_OscConfig+0x350>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	0019      	movs	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0adb      	lsrs	r3, r3, #11
 8000fe8:	2207      	movs	r2, #7
 8000fea:	4013      	ands	r3, r2
 8000fec:	4a7f      	ldr	r2, [pc, #508]	@ (80011ec <HAL_RCC_OscConfig+0x354>)
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	4b7f      	ldr	r3, [pc, #508]	@ (80011f0 <HAL_RCC_OscConfig+0x358>)
 8000ff2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ff4:	4b7f      	ldr	r3, [pc, #508]	@ (80011f4 <HAL_RCC_OscConfig+0x35c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff fc81 	bl	8000900 <HAL_InitTick>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d050      	beq.n	80010a4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e122      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d030      	beq.n	8001070 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800100e:	4b72      	ldr	r3, [pc, #456]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a75      	ldr	r2, [pc, #468]	@ (80011e8 <HAL_RCC_OscConfig+0x350>)
 8001014:	4013      	ands	r3, r2
 8001016:	0019      	movs	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	4b6e      	ldr	r3, [pc, #440]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 800101e:	430a      	orrs	r2, r1
 8001020:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001022:	4b6d      	ldr	r3, [pc, #436]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b6c      	ldr	r3, [pc, #432]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001028:	2180      	movs	r1, #128	@ 0x80
 800102a:	0049      	lsls	r1, r1, #1
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001030:	f7ff fcc2 	bl	80009b8 <HAL_GetTick>
 8001034:	0003      	movs	r3, r0
 8001036:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800103a:	f7ff fcbd 	bl	80009b8 <HAL_GetTick>
 800103e:	0002      	movs	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e0ff      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800104c:	4b62      	ldr	r3, [pc, #392]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4013      	ands	r3, r2
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b5f      	ldr	r3, [pc, #380]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4a61      	ldr	r2, [pc, #388]	@ (80011e4 <HAL_RCC_OscConfig+0x34c>)
 800105e:	4013      	ands	r3, r2
 8001060:	0019      	movs	r1, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	021a      	lsls	r2, r3, #8
 8001068:	4b5b      	ldr	r3, [pc, #364]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 800106a:	430a      	orrs	r2, r1
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	e019      	b.n	80010a4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001070:	4b59      	ldr	r3, [pc, #356]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b58      	ldr	r3, [pc, #352]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001076:	4960      	ldr	r1, [pc, #384]	@ (80011f8 <HAL_RCC_OscConfig+0x360>)
 8001078:	400a      	ands	r2, r1
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107c:	f7ff fc9c 	bl	80009b8 <HAL_GetTick>
 8001080:	0003      	movs	r3, r0
 8001082:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001086:	f7ff fc97 	bl	80009b8 <HAL_GetTick>
 800108a:	0002      	movs	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e0d9      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001098:	4b4f      	ldr	r3, [pc, #316]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2380      	movs	r3, #128	@ 0x80
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	4013      	ands	r3, r2
 80010a2:	d1f0      	bne.n	8001086 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2208      	movs	r2, #8
 80010aa:	4013      	ands	r3, r2
 80010ac:	d042      	beq.n	8001134 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80010ae:	4b4a      	ldr	r3, [pc, #296]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2238      	movs	r2, #56	@ 0x38
 80010b4:	4013      	ands	r3, r2
 80010b6:	2b18      	cmp	r3, #24
 80010b8:	d105      	bne.n	80010c6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d138      	bne.n	8001134 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e0c2      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d019      	beq.n	8001102 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80010ce:	4b42      	ldr	r3, [pc, #264]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 80010d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010d2:	4b41      	ldr	r3, [pc, #260]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010da:	f7ff fc6d 	bl	80009b8 <HAL_GetTick>
 80010de:	0003      	movs	r3, r0
 80010e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80010e4:	f7ff fc68 	bl	80009b8 <HAL_GetTick>
 80010e8:	0002      	movs	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e0aa      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80010f6:	4b38      	ldr	r3, [pc, #224]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 80010f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010fa:	2202      	movs	r2, #2
 80010fc:	4013      	ands	r3, r2
 80010fe:	d0f1      	beq.n	80010e4 <HAL_RCC_OscConfig+0x24c>
 8001100:	e018      	b.n	8001134 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001102:	4b35      	ldr	r3, [pc, #212]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001104:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001106:	4b34      	ldr	r3, [pc, #208]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001108:	2101      	movs	r1, #1
 800110a:	438a      	bics	r2, r1
 800110c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110e:	f7ff fc53 	bl	80009b8 <HAL_GetTick>
 8001112:	0003      	movs	r3, r0
 8001114:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001118:	f7ff fc4e 	bl	80009b8 <HAL_GetTick>
 800111c:	0002      	movs	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e090      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800112a:	4b2b      	ldr	r3, [pc, #172]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112e:	2202      	movs	r2, #2
 8001130:	4013      	ands	r3, r2
 8001132:	d1f1      	bne.n	8001118 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2204      	movs	r2, #4
 800113a:	4013      	ands	r3, r2
 800113c:	d100      	bne.n	8001140 <HAL_RCC_OscConfig+0x2a8>
 800113e:	e084      	b.n	800124a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001148:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2238      	movs	r2, #56	@ 0x38
 800114e:	4013      	ands	r3, r2
 8001150:	2b20      	cmp	r3, #32
 8001152:	d106      	bne.n	8001162 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d000      	beq.n	800115e <HAL_RCC_OscConfig+0x2c6>
 800115c:	e075      	b.n	800124a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e074      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d106      	bne.n	8001178 <HAL_RCC_OscConfig+0x2e0>
 800116a:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 800116c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800116e:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001170:	2101      	movs	r1, #1
 8001172:	430a      	orrs	r2, r1
 8001174:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001176:	e01c      	b.n	80011b2 <HAL_RCC_OscConfig+0x31a>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	2b05      	cmp	r3, #5
 800117e:	d10c      	bne.n	800119a <HAL_RCC_OscConfig+0x302>
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001182:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001186:	2104      	movs	r1, #4
 8001188:	430a      	orrs	r2, r1
 800118a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 800118e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001190:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 8001192:	2101      	movs	r1, #1
 8001194:	430a      	orrs	r2, r1
 8001196:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001198:	e00b      	b.n	80011b2 <HAL_RCC_OscConfig+0x31a>
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 800119c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	438a      	bics	r2, r1
 80011a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 80011a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80011aa:	4b0b      	ldr	r3, [pc, #44]	@ (80011d8 <HAL_RCC_OscConfig+0x340>)
 80011ac:	2104      	movs	r1, #4
 80011ae:	438a      	bics	r2, r1
 80011b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d028      	beq.n	800120c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ba:	f7ff fbfd 	bl	80009b8 <HAL_GetTick>
 80011be:	0003      	movs	r3, r0
 80011c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c4:	f7ff fbf8 	bl	80009b8 <HAL_GetTick>
 80011c8:	0002      	movs	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <HAL_RCC_OscConfig+0x364>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d915      	bls.n	8001200 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e039      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
 80011d8:	40021000 	.word	0x40021000
 80011dc:	fffeffff 	.word	0xfffeffff
 80011e0:	fffbffff 	.word	0xfffbffff
 80011e4:	ffff80ff 	.word	0xffff80ff
 80011e8:	ffffc7ff 	.word	0xffffc7ff
 80011ec:	02dc6c00 	.word	0x02dc6c00
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004
 80011f8:	fffffeff 	.word	0xfffffeff
 80011fc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <HAL_RCC_OscConfig+0x3bc>)
 8001202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001204:	2202      	movs	r2, #2
 8001206:	4013      	ands	r3, r2
 8001208:	d0dc      	beq.n	80011c4 <HAL_RCC_OscConfig+0x32c>
 800120a:	e013      	b.n	8001234 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120c:	f7ff fbd4 	bl	80009b8 <HAL_GetTick>
 8001210:	0003      	movs	r3, r0
 8001212:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001214:	e009      	b.n	800122a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff fbcf 	bl	80009b8 <HAL_GetTick>
 800121a:	0002      	movs	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <HAL_RCC_OscConfig+0x3c0>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e010      	b.n	800124c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800122a:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <HAL_RCC_OscConfig+0x3bc>)
 800122c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800122e:	2202      	movs	r2, #2
 8001230:	4013      	ands	r3, r2
 8001232:	d1f0      	bne.n	8001216 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001234:	230f      	movs	r3, #15
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d105      	bne.n	800124a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800123e:	4b05      	ldr	r3, [pc, #20]	@ (8001254 <HAL_RCC_OscConfig+0x3bc>)
 8001240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001242:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <HAL_RCC_OscConfig+0x3bc>)
 8001244:	4905      	ldr	r1, [pc, #20]	@ (800125c <HAL_RCC_OscConfig+0x3c4>)
 8001246:	400a      	ands	r2, r1
 8001248:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	0018      	movs	r0, r3
 800124e:	46bd      	mov	sp, r7
 8001250:	b006      	add	sp, #24
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	00001388 	.word	0x00001388
 800125c:	efffffff 	.word	0xefffffff

08001260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0e9      	b.n	8001448 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001274:	4b76      	ldr	r3, [pc, #472]	@ (8001450 <HAL_RCC_ClockConfig+0x1f0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2207      	movs	r2, #7
 800127a:	4013      	ands	r3, r2
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d91e      	bls.n	80012c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b73      	ldr	r3, [pc, #460]	@ (8001450 <HAL_RCC_ClockConfig+0x1f0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2207      	movs	r2, #7
 8001288:	4393      	bics	r3, r2
 800128a:	0019      	movs	r1, r3
 800128c:	4b70      	ldr	r3, [pc, #448]	@ (8001450 <HAL_RCC_ClockConfig+0x1f0>)
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001294:	f7ff fb90 	bl	80009b8 <HAL_GetTick>
 8001298:	0003      	movs	r3, r0
 800129a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800129c:	e009      	b.n	80012b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800129e:	f7ff fb8b 	bl	80009b8 <HAL_GetTick>
 80012a2:	0002      	movs	r2, r0
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001454 <HAL_RCC_ClockConfig+0x1f4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e0ca      	b.n	8001448 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012b2:	4b67      	ldr	r3, [pc, #412]	@ (8001450 <HAL_RCC_ClockConfig+0x1f0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2207      	movs	r2, #7
 80012b8:	4013      	ands	r3, r2
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d1ee      	bne.n	800129e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2202      	movs	r2, #2
 80012c6:	4013      	ands	r3, r2
 80012c8:	d017      	beq.n	80012fa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2204      	movs	r2, #4
 80012d0:	4013      	ands	r3, r2
 80012d2:	d008      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012d4:	4b60      	ldr	r3, [pc, #384]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a60      	ldr	r2, [pc, #384]	@ (800145c <HAL_RCC_ClockConfig+0x1fc>)
 80012da:	401a      	ands	r2, r3
 80012dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 80012de:	21b0      	movs	r1, #176	@ 0xb0
 80012e0:	0109      	lsls	r1, r1, #4
 80012e2:	430a      	orrs	r2, r1
 80012e4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	4a5d      	ldr	r2, [pc, #372]	@ (8001460 <HAL_RCC_ClockConfig+0x200>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	0019      	movs	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	4b58      	ldr	r3, [pc, #352]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 80012f6:	430a      	orrs	r2, r1
 80012f8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2201      	movs	r2, #1
 8001300:	4013      	ands	r3, r2
 8001302:	d055      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001304:	4b54      	ldr	r3, [pc, #336]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	221c      	movs	r2, #28
 800130a:	4393      	bics	r3, r2
 800130c:	0019      	movs	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	4b51      	ldr	r3, [pc, #324]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 8001314:	430a      	orrs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d107      	bne.n	8001330 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001320:	4b4d      	ldr	r3, [pc, #308]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	029b      	lsls	r3, r3, #10
 8001328:	4013      	ands	r3, r2
 800132a:	d11f      	bne.n	800136c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e08b      	b.n	8001448 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d107      	bne.n	8001348 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001338:	4b47      	ldr	r3, [pc, #284]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	4013      	ands	r3, r2
 8001342:	d113      	bne.n	800136c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e07f      	b.n	8001448 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b03      	cmp	r3, #3
 800134e:	d106      	bne.n	800135e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001350:	4b41      	ldr	r3, [pc, #260]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 8001352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001354:	2202      	movs	r2, #2
 8001356:	4013      	ands	r3, r2
 8001358:	d108      	bne.n	800136c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e074      	b.n	8001448 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800135e:	4b3e      	ldr	r3, [pc, #248]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 8001360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d101      	bne.n	800136c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e06d      	b.n	8001448 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800136c:	4b3a      	ldr	r3, [pc, #232]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2207      	movs	r2, #7
 8001372:	4393      	bics	r3, r2
 8001374:	0019      	movs	r1, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4b37      	ldr	r3, [pc, #220]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 800137c:	430a      	orrs	r2, r1
 800137e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001380:	f7ff fb1a 	bl	80009b8 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001388:	e009      	b.n	800139e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800138a:	f7ff fb15 	bl	80009b8 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	4a2f      	ldr	r2, [pc, #188]	@ (8001454 <HAL_RCC_ClockConfig+0x1f4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e054      	b.n	8001448 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2238      	movs	r2, #56	@ 0x38
 80013a4:	401a      	ands	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d1ec      	bne.n	800138a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b0:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <HAL_RCC_ClockConfig+0x1f0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2207      	movs	r2, #7
 80013b6:	4013      	ands	r3, r2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d21e      	bcs.n	80013fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <HAL_RCC_ClockConfig+0x1f0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2207      	movs	r2, #7
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	4b21      	ldr	r3, [pc, #132]	@ (8001450 <HAL_RCC_ClockConfig+0x1f0>)
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013d0:	f7ff faf2 	bl	80009b8 <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013d8:	e009      	b.n	80013ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013da:	f7ff faed 	bl	80009b8 <HAL_GetTick>
 80013de:	0002      	movs	r2, r0
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001454 <HAL_RCC_ClockConfig+0x1f4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e02c      	b.n	8001448 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013ee:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <HAL_RCC_ClockConfig+0x1f0>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2207      	movs	r2, #7
 80013f4:	4013      	ands	r3, r2
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d1ee      	bne.n	80013da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2204      	movs	r2, #4
 8001402:	4013      	ands	r3, r2
 8001404:	d009      	beq.n	800141a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <HAL_RCC_ClockConfig+0x204>)
 800140c:	4013      	ands	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 8001416:	430a      	orrs	r2, r1
 8001418:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800141a:	f000 f82b 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 800141e:	0001      	movs	r1, r0
 8001420:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_RCC_ClockConfig+0x1f8>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	220f      	movs	r2, #15
 8001428:	401a      	ands	r2, r3
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <HAL_RCC_ClockConfig+0x208>)
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	58d3      	ldr	r3, [r2, r3]
 8001430:	221f      	movs	r2, #31
 8001432:	4013      	ands	r3, r2
 8001434:	000a      	movs	r2, r1
 8001436:	40da      	lsrs	r2, r3
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <HAL_RCC_ClockConfig+0x20c>)
 800143a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800143c:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <HAL_RCC_ClockConfig+0x210>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff fa5d 	bl	8000900 <HAL_InitTick>
 8001446:	0003      	movs	r3, r0
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	b004      	add	sp, #16
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40022000 	.word	0x40022000
 8001454:	00001388 	.word	0x00001388
 8001458:	40021000 	.word	0x40021000
 800145c:	ffff84ff 	.word	0xffff84ff
 8001460:	fffff0ff 	.word	0xfffff0ff
 8001464:	ffff8fff 	.word	0xffff8fff
 8001468:	08002b8c 	.word	0x08002b8c
 800146c:	20000000 	.word	0x20000000
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <HAL_RCC_GetSysClockFreq+0x78>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2238      	movs	r2, #56	@ 0x38
 8001480:	4013      	ands	r3, r2
 8001482:	d10f      	bne.n	80014a4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001484:	4b19      	ldr	r3, [pc, #100]	@ (80014ec <HAL_RCC_GetSysClockFreq+0x78>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	0adb      	lsrs	r3, r3, #11
 800148a:	2207      	movs	r2, #7
 800148c:	4013      	ands	r3, r2
 800148e:	2201      	movs	r2, #1
 8001490:	409a      	lsls	r2, r3
 8001492:	0013      	movs	r3, r2
 8001494:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001496:	6839      	ldr	r1, [r7, #0]
 8001498:	4815      	ldr	r0, [pc, #84]	@ (80014f0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800149a:	f7fe fe3d 	bl	8000118 <__udivsi3>
 800149e:	0003      	movs	r3, r0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	e01e      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <HAL_RCC_GetSysClockFreq+0x78>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2238      	movs	r2, #56	@ 0x38
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d102      	bne.n	80014b6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80014b0:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_RCC_GetSysClockFreq+0x80>)
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <HAL_RCC_GetSysClockFreq+0x78>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2238      	movs	r2, #56	@ 0x38
 80014bc:	4013      	ands	r3, r2
 80014be:	2b20      	cmp	r3, #32
 80014c0:	d103      	bne.n	80014ca <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	e00b      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <HAL_RCC_GetSysClockFreq+0x78>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2238      	movs	r2, #56	@ 0x38
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b18      	cmp	r3, #24
 80014d4:	d103      	bne.n	80014de <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80014d6:	23fa      	movs	r3, #250	@ 0xfa
 80014d8:	01db      	lsls	r3, r3, #7
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	e001      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80014e2:	687b      	ldr	r3, [r7, #4]
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b002      	add	sp, #8
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	02dc6c00 	.word	0x02dc6c00
 80014f4:	007a1200 	.word	0x007a1200

080014f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014fc:	4b02      	ldr	r3, [pc, #8]	@ (8001508 <HAL_RCC_GetHCLKFreq+0x10>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	20000000 	.word	0x20000000

0800150c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001510:	f7ff fff2 	bl	80014f8 <HAL_RCC_GetHCLKFreq>
 8001514:	0001      	movs	r1, r0
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	0b1b      	lsrs	r3, r3, #12
 800151c:	2207      	movs	r2, #7
 800151e:	401a      	ands	r2, r3
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	58d3      	ldr	r3, [r2, r3]
 8001526:	221f      	movs	r2, #31
 8001528:	4013      	ands	r3, r2
 800152a:	40d9      	lsrs	r1, r3
 800152c:	000b      	movs	r3, r1
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	08002bcc 	.word	0x08002bcc

0800153c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001544:	2313      	movs	r3, #19
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	2200      	movs	r2, #0
 800154a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800154c:	2312      	movs	r3, #18
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	029b      	lsls	r3, r3, #10
 800155c:	4013      	ands	r3, r2
 800155e:	d100      	bne.n	8001562 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001560:	e079      	b.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2011      	movs	r0, #17
 8001564:	183b      	adds	r3, r7, r0
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156a:	4b64      	ldr	r3, [pc, #400]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800156c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	055b      	lsls	r3, r3, #21
 8001572:	4013      	ands	r3, r2
 8001574:	d110      	bne.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b61      	ldr	r3, [pc, #388]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800157a:	4b60      	ldr	r3, [pc, #384]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800157c:	2180      	movs	r1, #128	@ 0x80
 800157e:	0549      	lsls	r1, r1, #21
 8001580:	430a      	orrs	r2, r1
 8001582:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001584:	4b5d      	ldr	r3, [pc, #372]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	055b      	lsls	r3, r3, #21
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001592:	183b      	adds	r3, r7, r0
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001598:	4b58      	ldr	r3, [pc, #352]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800159a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800159c:	23c0      	movs	r3, #192	@ 0xc0
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4013      	ands	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d019      	beq.n	80015de <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d014      	beq.n	80015de <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80015b4:	4b51      	ldr	r3, [pc, #324]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b8:	4a51      	ldr	r2, [pc, #324]	@ (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80015be:	4b4f      	ldr	r3, [pc, #316]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015c2:	4b4e      	ldr	r3, [pc, #312]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015c4:	2180      	movs	r1, #128	@ 0x80
 80015c6:	0249      	lsls	r1, r1, #9
 80015c8:	430a      	orrs	r2, r1
 80015ca:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80015cc:	4b4b      	ldr	r3, [pc, #300]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015d0:	4b4a      	ldr	r3, [pc, #296]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015d2:	494c      	ldr	r1, [pc, #304]	@ (8001704 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80015d8:	4b48      	ldr	r3, [pc, #288]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	d016      	beq.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e6:	f7ff f9e7 	bl	80009b8 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015ee:	e00c      	b.n	800160a <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff f9e2 	bl	80009b8 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	4a43      	ldr	r2, [pc, #268]	@ (8001708 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d904      	bls.n	800160a <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8001600:	2313      	movs	r3, #19
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	2203      	movs	r2, #3
 8001606:	701a      	strb	r2, [r3, #0]
          break;
 8001608:	e004      	b.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800160a:	4b3c      	ldr	r3, [pc, #240]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800160c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160e:	2202      	movs	r2, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d0ed      	beq.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8001614:	2313      	movs	r3, #19
 8001616:	18fb      	adds	r3, r7, r3
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10a      	bne.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800161e:	4b37      	ldr	r3, [pc, #220]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001622:	4a37      	ldr	r2, [pc, #220]	@ (8001700 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001624:	4013      	ands	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699a      	ldr	r2, [r3, #24]
 800162c:	4b33      	ldr	r3, [pc, #204]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800162e:	430a      	orrs	r2, r1
 8001630:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001632:	e005      	b.n	8001640 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001634:	2312      	movs	r3, #18
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	2213      	movs	r2, #19
 800163a:	18ba      	adds	r2, r7, r2
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001640:	2311      	movs	r3, #17
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d105      	bne.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164a:	4b2c      	ldr	r3, [pc, #176]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800164c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800164e:	4b2b      	ldr	r3, [pc, #172]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001650:	492e      	ldr	r1, [pc, #184]	@ (800170c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001652:	400a      	ands	r2, r1
 8001654:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d009      	beq.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001660:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001664:	2203      	movs	r2, #3
 8001666:	4393      	bics	r3, r2
 8001668:	0019      	movs	r1, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001670:	430a      	orrs	r2, r1
 8001672:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2240      	movs	r2, #64	@ 0x40
 800167a:	4013      	ands	r3, r2
 800167c:	d009      	beq.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800167e:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001682:	4a23      	ldr	r2, [pc, #140]	@ (8001710 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001684:	4013      	ands	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800168e:	430a      	orrs	r2, r1
 8001690:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	01db      	lsls	r3, r3, #7
 800169a:	4013      	ands	r3, r2
 800169c:	d008      	beq.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800169e:	4b17      	ldr	r3, [pc, #92]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	0899      	lsrs	r1, r3, #2
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016ac:	430a      	orrs	r2, r1
 80016ae:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	4013      	ands	r3, r2
 80016ba:	d009      	beq.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80016bc:	4b0f      	ldr	r3, [pc, #60]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c0:	4a14      	ldr	r2, [pc, #80]	@ (8001714 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	0019      	movs	r1, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016cc:	430a      	orrs	r2, r1
 80016ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da09      	bge.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	22e0      	movs	r2, #224	@ 0xe0
 80016de:	4393      	bics	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
  }
  return status;
 80016ec:	2312      	movs	r3, #18
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	781b      	ldrb	r3, [r3, #0]
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b006      	add	sp, #24
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	40021000 	.word	0x40021000
 8001700:	fffffcff 	.word	0xfffffcff
 8001704:	fffeffff 	.word	0xfffeffff
 8001708:	00001388 	.word	0x00001388
 800170c:	efffffff 	.word	0xefffffff
 8001710:	ffffcfff 	.word	0xffffcfff
 8001714:	ffff3fff 	.word	0xffff3fff

08001718 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001720:	230f      	movs	r3, #15
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	2201      	movs	r2, #1
 8001726:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d100      	bne.n	8001730 <HAL_RTC_Init+0x18>
 800172e:	e088      	b.n	8001842 <HAL_RTC_Init+0x12a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2225      	movs	r2, #37	@ 0x25
 8001734:	5c9b      	ldrb	r3, [r3, r2]
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2224      	movs	r2, #36	@ 0x24
 8001740:	2100      	movs	r1, #0
 8001742:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0018      	movs	r0, r3
 8001748:	f7fe ffe8 	bl	800071c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2225      	movs	r2, #37	@ 0x25
 8001750:	2102      	movs	r1, #2
 8001752:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2210      	movs	r2, #16
 800175c:	4013      	ands	r3, r2
 800175e:	2b10      	cmp	r3, #16
 8001760:	d062      	beq.n	8001828 <HAL_RTC_Init+0x110>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	22ca      	movs	r2, #202	@ 0xca
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2253      	movs	r2, #83	@ 0x53
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8001772:	250f      	movs	r5, #15
 8001774:	197c      	adds	r4, r7, r5
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	0018      	movs	r0, r3
 800177a:	f000 fab6 	bl	8001cea <RTC_EnterInitMode>
 800177e:	0003      	movs	r3, r0
 8001780:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8001782:	0028      	movs	r0, r5
 8001784:	183b      	adds	r3, r7, r0
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d12c      	bne.n	80017e6 <HAL_RTC_Init+0xce>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	492e      	ldr	r1, [pc, #184]	@ (8001850 <HAL_RTC_Init+0x138>)
 8001798:	400a      	ands	r2, r1
 800179a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6999      	ldr	r1, [r3, #24]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	431a      	orrs	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68d2      	ldr	r2, [r2, #12]
 80017c2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6919      	ldr	r1, [r3, #16]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	041a      	lsls	r2, r3, #16
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80017d8:	183c      	adds	r4, r7, r0
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0018      	movs	r0, r3
 80017de:	f000 facf 	bl	8001d80 <RTC_ExitInitMode>
 80017e2:	0003      	movs	r3, r0
 80017e4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80017e6:	230f      	movs	r3, #15
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d116      	bne.n	800181e <HAL_RTC_Init+0x106>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	699a      	ldr	r2, [r3, #24]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	00d2      	lsls	r2, r2, #3
 80017fc:	08d2      	lsrs	r2, r2, #3
 80017fe:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6999      	ldr	r1, [r3, #24]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1a      	ldr	r2, [r3, #32]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	430a      	orrs	r2, r1
 800181c:	619a      	str	r2, [r3, #24]
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	22ff      	movs	r2, #255	@ 0xff
 8001824:	625a      	str	r2, [r3, #36]	@ 0x24
 8001826:	e003      	b.n	8001830 <HAL_RTC_Init+0x118>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8001828:	230f      	movs	r3, #15
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8001830:	230f      	movs	r3, #15
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d103      	bne.n	8001842 <HAL_RTC_Init+0x12a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2225      	movs	r2, #37	@ 0x25
 800183e:	2101      	movs	r1, #1
 8001840:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8001842:	230f      	movs	r3, #15
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	781b      	ldrb	r3, [r3, #0]
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b004      	add	sp, #16
 800184e:	bdb0      	pop	{r4, r5, r7, pc}
 8001850:	ff8fffbf 	.word	0xff8fffbf

08001854 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2224      	movs	r2, #36	@ 0x24
 8001864:	5c9b      	ldrb	r3, [r3, r2]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_RTC_SetTime+0x1a>
 800186a:	2302      	movs	r3, #2
 800186c:	e092      	b.n	8001994 <HAL_RTC_SetTime+0x140>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2224      	movs	r2, #36	@ 0x24
 8001872:	2101      	movs	r1, #1
 8001874:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2225      	movs	r2, #37	@ 0x25
 800187a:	2102      	movs	r1, #2
 800187c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	22ca      	movs	r2, #202	@ 0xca
 8001884:	625a      	str	r2, [r3, #36]	@ 0x24
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2253      	movs	r2, #83	@ 0x53
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800188e:	2513      	movs	r5, #19
 8001890:	197c      	adds	r4, r7, r5
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	0018      	movs	r0, r3
 8001896:	f000 fa28 	bl	8001cea <RTC_EnterInitMode>
 800189a:	0003      	movs	r3, r0
 800189c:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800189e:	197b      	adds	r3, r7, r5
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d162      	bne.n	800196c <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d125      	bne.n	80018f8 <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2240      	movs	r2, #64	@ 0x40
 80018b4:	4013      	ands	r3, r2
 80018b6:	d102      	bne.n	80018be <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2200      	movs	r2, #0
 80018bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	0018      	movs	r0, r3
 80018c4:	f000 faa0 	bl	8001e08 <RTC_ByteToBcd2>
 80018c8:	0003      	movs	r3, r0
 80018ca:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	785b      	ldrb	r3, [r3, #1]
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 fa99 	bl	8001e08 <RTC_ByteToBcd2>
 80018d6:	0003      	movs	r3, r0
 80018d8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80018da:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	789b      	ldrb	r3, [r3, #2]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 fa91 	bl	8001e08 <RTC_ByteToBcd2>
 80018e6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80018e8:	0022      	movs	r2, r4
 80018ea:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	78db      	ldrb	r3, [r3, #3]
 80018f0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e017      	b.n	8001928 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2240      	movs	r2, #64	@ 0x40
 8001900:	4013      	ands	r3, r2
 8001902:	d102      	bne.n	800190a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2200      	movs	r2, #0
 8001908:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	785b      	ldrb	r3, [r3, #1]
 8001914:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001916:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800191c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	78db      	ldrb	r3, [r3, #3]
 8001922:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001924:	4313      	orrs	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	491b      	ldr	r1, [pc, #108]	@ (800199c <HAL_RTC_SetTime+0x148>)
 8001930:	400a      	ands	r2, r1
 8001932:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	699a      	ldr	r2, [r3, #24]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4918      	ldr	r1, [pc, #96]	@ (80019a0 <HAL_RTC_SetTime+0x14c>)
 8001940:	400a      	ands	r2, r1
 8001942:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6999      	ldr	r1, [r3, #24]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	68da      	ldr	r2, [r3, #12]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	431a      	orrs	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800195c:	2313      	movs	r3, #19
 800195e:	18fc      	adds	r4, r7, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	0018      	movs	r0, r3
 8001964:	f000 fa0c 	bl	8001d80 <RTC_ExitInitMode>
 8001968:	0003      	movs	r3, r0
 800196a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	22ff      	movs	r2, #255	@ 0xff
 8001972:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8001974:	2313      	movs	r3, #19
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d103      	bne.n	8001986 <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2225      	movs	r2, #37	@ 0x25
 8001982:	2101      	movs	r1, #1
 8001984:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2224      	movs	r2, #36	@ 0x24
 800198a:	2100      	movs	r1, #0
 800198c:	5499      	strb	r1, [r3, r2]

  return status;
 800198e:	2313      	movs	r3, #19
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	781b      	ldrb	r3, [r3, #0]
}
 8001994:	0018      	movs	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	b006      	add	sp, #24
 800199a:	bdb0      	pop	{r4, r5, r7, pc}
 800199c:	007f7f7f 	.word	0x007f7f7f
 80019a0:	fffbffff 	.word	0xfffbffff

080019a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2224      	movs	r2, #36	@ 0x24
 80019b4:	5c9b      	ldrb	r3, [r3, r2]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d101      	bne.n	80019be <HAL_RTC_SetDate+0x1a>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e07e      	b.n	8001abc <HAL_RTC_SetDate+0x118>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2224      	movs	r2, #36	@ 0x24
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2225      	movs	r2, #37	@ 0x25
 80019ca:	2102      	movs	r1, #2
 80019cc:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10e      	bne.n	80019f2 <HAL_RTC_SetDate+0x4e>
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	001a      	movs	r2, r3
 80019da:	2310      	movs	r3, #16
 80019dc:	4013      	ands	r3, r2
 80019de:	d008      	beq.n	80019f2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	785b      	ldrb	r3, [r3, #1]
 80019e4:	2210      	movs	r2, #16
 80019e6:	4393      	bics	r3, r2
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	330a      	adds	r3, #10
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d11c      	bne.n	8001a32 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	78db      	ldrb	r3, [r3, #3]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 fa03 	bl	8001e08 <RTC_ByteToBcd2>
 8001a02:	0003      	movs	r3, r0
 8001a04:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f000 f9fc 	bl	8001e08 <RTC_ByteToBcd2>
 8001a10:	0003      	movs	r3, r0
 8001a12:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001a14:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	789b      	ldrb	r3, [r3, #2]
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f000 f9f4 	bl	8001e08 <RTC_ByteToBcd2>
 8001a20:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001a22:	0022      	movs	r2, r4
 8001a24:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e00e      	b.n	8001a50 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	78db      	ldrb	r3, [r3, #3]
 8001a36:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	785b      	ldrb	r3, [r3, #1]
 8001a3c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001a3e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001a44:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	22ca      	movs	r2, #202	@ 0xca
 8001a56:	625a      	str	r2, [r3, #36]	@ 0x24
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2253      	movs	r2, #83	@ 0x53
 8001a5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001a60:	2513      	movs	r5, #19
 8001a62:	197c      	adds	r4, r7, r5
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 f93f 	bl	8001cea <RTC_EnterInitMode>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001a70:	0028      	movs	r0, r5
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4910      	ldr	r1, [pc, #64]	@ (8001ac4 <HAL_RTC_SetDate+0x120>)
 8001a82:	400a      	ands	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001a86:	183c      	adds	r4, r7, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 f978 	bl	8001d80 <RTC_ExitInitMode>
 8001a90:	0003      	movs	r3, r0
 8001a92:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	22ff      	movs	r2, #255	@ 0xff
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8001a9c:	2313      	movs	r3, #19
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2225      	movs	r2, #37	@ 0x25
 8001aaa:	2101      	movs	r1, #1
 8001aac:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2224      	movs	r2, #36	@ 0x24
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	5499      	strb	r1, [r3, r2]

  return status;
 8001ab6:	2313      	movs	r3, #19
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	781b      	ldrb	r3, [r3, #0]
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b006      	add	sp, #24
 8001ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ac4:	00ffff3f 	.word	0x00ffff3f

08001ac8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2224      	movs	r2, #36	@ 0x24
 8001ad8:	5c9b      	ldrb	r3, [r3, r2]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_RTC_SetAlarm+0x1a>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e0c8      	b.n	8001c74 <HAL_RTC_SetAlarm+0x1ac>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2224      	movs	r2, #36	@ 0x24
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2225      	movs	r2, #37	@ 0x25
 8001aee:	2102      	movs	r1, #2
 8001af0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d136      	bne.n	8001b66 <HAL_RTC_SetAlarm+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2240      	movs	r2, #64	@ 0x40
 8001b00:	4013      	ands	r3, r2
 8001b02:	d102      	bne.n	8001b0a <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	2200      	movs	r2, #0
 8001b08:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 f97a 	bl	8001e08 <RTC_ByteToBcd2>
 8001b14:	0003      	movs	r3, r0
 8001b16:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	785b      	ldrb	r3, [r3, #1]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 f973 	bl	8001e08 <RTC_ByteToBcd2>
 8001b22:	0003      	movs	r3, r0
 8001b24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001b26:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	789b      	ldrb	r3, [r3, #2]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 f96b 	bl	8001e08 <RTC_ByteToBcd2>
 8001b32:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001b34:	0022      	movs	r2, r4
 8001b36:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	78db      	ldrb	r3, [r3, #3]
 8001b3c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2220      	movs	r2, #32
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 f95d 	bl	8001e08 <RTC_ByteToBcd2>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001b52:	0022      	movs	r2, r4
 8001b54:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001b5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	e022      	b.n	8001bac <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2240      	movs	r2, #64	@ 0x40
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d102      	bne.n	8001b78 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2200      	movs	r2, #0
 8001b76:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	785b      	ldrb	r3, [r3, #1]
 8001b82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001b84:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001b8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	78db      	ldrb	r3, [r3, #3]
 8001b90:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001b92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2120      	movs	r1, #32
 8001b98:	5c5b      	ldrb	r3, [r3, r1]
 8001b9a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001b9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001ba2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	22ca      	movs	r2, #202	@ 0xca
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2253      	movs	r2, #83	@ 0x53
 8001bc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d142      	bne.n	8001c5a <HAL_RTC_SetAlarm+0x192>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4927      	ldr	r1, [pc, #156]	@ (8001c7c <HAL_RTC_SetAlarm+0x1b4>)
 8001be0:	400a      	ands	r2, r1
 8001be2:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699a      	ldr	r2, [r3, #24]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4924      	ldr	r1, [pc, #144]	@ (8001c80 <HAL_RTC_SetAlarm+0x1b8>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8001bf4:	f7fe fee0 	bl	80009b8 <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001bfc:	e016      	b.n	8001c2c <HAL_RTC_SetAlarm+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001bfe:	f7fe fedb 	bl	80009b8 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	1ad2      	subs	r2, r2, r3
 8001c08:	23fa      	movs	r3, #250	@ 0xfa
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d90d      	bls.n	8001c2c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	22ff      	movs	r2, #255	@ 0xff
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2225      	movs	r2, #37	@ 0x25
 8001c1c:	2103      	movs	r1, #3
 8001c1e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2224      	movs	r2, #36	@ 0x24
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e023      	b.n	8001c74 <HAL_RTC_SetAlarm+0x1ac>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4013      	ands	r3, r2
 8001c36:	d0e2      	beq.n	8001bfe <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	0049      	lsls	r1, r1, #1
 8001c56:	430a      	orrs	r2, r1
 8001c58:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	22ff      	movs	r2, #255	@ 0xff
 8001c60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2225      	movs	r2, #37	@ 0x25
 8001c66:	2101      	movs	r1, #1
 8001c68:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2224      	movs	r2, #36	@ 0x24
 8001c6e:	2100      	movs	r1, #0
 8001c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b009      	add	sp, #36	@ 0x24
 8001c7a:	bd90      	pop	{r4, r7, pc}
 8001c7c:	fffffeff 	.word	0xfffffeff
 8001c80:	ffffefff 	.word	0xffffefff

08001c84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	21a0      	movs	r1, #160	@ 0xa0
 8001c98:	438a      	bics	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001c9c:	f7fe fe8c 	bl	80009b8 <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001ca4:	e014      	b.n	8001cd0 <HAL_RTC_WaitForSynchro+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001ca6:	f7fe fe87 	bl	80009b8 <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad2      	subs	r2, r2, r3
 8001cb0:	23fa      	movs	r3, #250	@ 0xfa
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d90b      	bls.n	8001cd0 <HAL_RTC_WaitForSynchro+0x4c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d10c      	bne.n	8001cde <HAL_RTC_WaitForSynchro+0x5a>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;  
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2225      	movs	r2, #37	@ 0x25
 8001cc8:	2103      	movs	r1, #3
 8001cca:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e008      	b.n	8001ce2 <HAL_RTC_WaitForSynchro+0x5e>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d0e4      	beq.n	8001ca6 <HAL_RTC_WaitForSynchro+0x22>
 8001cdc:	e000      	b.n	8001ce0 <HAL_RTC_WaitForSynchro+0x5c>
      }
      else
      {
        break;
 8001cde:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b004      	add	sp, #16
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001cf2:	230f      	movs	r3, #15
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	2240      	movs	r2, #64	@ 0x40
 8001d02:	4013      	ands	r3, r2
 8001d04:	d134      	bne.n	8001d70 <RTC_EnterInitMode+0x86>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2180      	movs	r1, #128	@ 0x80
 8001d12:	430a      	orrs	r2, r1
 8001d14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001d16:	f7fe fe4f 	bl	80009b8 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001d1e:	e01a      	b.n	8001d56 <RTC_EnterInitMode+0x6c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001d20:	f7fe fe4a 	bl	80009b8 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad2      	subs	r2, r2, r3
 8001d2a:	200f      	movs	r0, #15
 8001d2c:	183b      	adds	r3, r7, r0
 8001d2e:	1839      	adds	r1, r7, r0
 8001d30:	7809      	ldrb	r1, [r1, #0]
 8001d32:	7019      	strb	r1, [r3, #0]
 8001d34:	23fa      	movs	r3, #250	@ 0xfa
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d90c      	bls.n	8001d56 <RTC_EnterInitMode+0x6c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2240      	movs	r2, #64	@ 0x40
 8001d44:	4013      	ands	r3, r2
 8001d46:	d112      	bne.n	8001d6e <RTC_EnterInitMode+0x84>
        {
          status = HAL_TIMEOUT;
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2225      	movs	r2, #37	@ 0x25
 8001d52:	2103      	movs	r1, #3
 8001d54:	5499      	strb	r1, [r3, r2]
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2240      	movs	r2, #64	@ 0x40
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d106      	bne.n	8001d70 <RTC_EnterInitMode+0x86>
 8001d62:	230f      	movs	r3, #15
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d1d9      	bne.n	8001d20 <RTC_EnterInitMode+0x36>
 8001d6c:	e000      	b.n	8001d70 <RTC_EnterInitMode+0x86>
        }
        else
        {
          break;
 8001d6e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return status;
 8001d70:	230f      	movs	r3, #15
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	781b      	ldrb	r3, [r3, #0]
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b004      	add	sp, #16
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d88:	240f      	movs	r4, #15
 8001d8a:	193b      	adds	r3, r7, r4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001d90:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <RTC_ExitInitMode+0x84>)
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <RTC_ExitInitMode+0x84>)
 8001d96:	2180      	movs	r1, #128	@ 0x80
 8001d98:	438a      	bics	r2, r1
 8001d9a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <RTC_ExitInitMode+0x84>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2220      	movs	r2, #32
 8001da2:	4013      	ands	r3, r2
 8001da4:	d10d      	bne.n	8001dc2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7ff ff6b 	bl	8001c84 <HAL_RTC_WaitForSynchro>
 8001dae:	1e03      	subs	r3, r0, #0
 8001db0:	d021      	beq.n	8001df6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2225      	movs	r2, #37	@ 0x25
 8001db6:	2103      	movs	r1, #3
 8001db8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8001dba:	193b      	adds	r3, r7, r4
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e019      	b.n	8001df6 <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <RTC_ExitInitMode+0x84>)
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <RTC_ExitInitMode+0x84>)
 8001dc8:	2120      	movs	r1, #32
 8001dca:	438a      	bics	r2, r1
 8001dcc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff ff57 	bl	8001c84 <HAL_RTC_WaitForSynchro>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d007      	beq.n	8001dea <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2225      	movs	r2, #37	@ 0x25
 8001dde:	2103      	movs	r1, #3
 8001de0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8001de2:	230f      	movs	r3, #15
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2203      	movs	r2, #3
 8001de8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <RTC_ExitInitMode+0x84>)
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <RTC_ExitInitMode+0x84>)
 8001df0:	2120      	movs	r1, #32
 8001df2:	430a      	orrs	r2, r1
 8001df4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8001df6:	230f      	movs	r3, #15
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	781b      	ldrb	r3, [r3, #0]
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b005      	add	sp, #20
 8001e02:	bd90      	pop	{r4, r7, pc}
 8001e04:	40002800 	.word	0x40002800

08001e08 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	0002      	movs	r2, r0
 8001e10:	1dfb      	adds	r3, r7, #7
 8001e12:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8001e18:	230b      	movs	r3, #11
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	1dfa      	adds	r2, r7, #7
 8001e1e:	7812      	ldrb	r2, [r2, #0]
 8001e20:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8001e22:	e008      	b.n	8001e36 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8001e2a:	220b      	movs	r2, #11
 8001e2c:	18bb      	adds	r3, r7, r2
 8001e2e:	18ba      	adds	r2, r7, r2
 8001e30:	7812      	ldrb	r2, [r2, #0]
 8001e32:	3a0a      	subs	r2, #10
 8001e34:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8001e36:	210b      	movs	r1, #11
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b09      	cmp	r3, #9
 8001e3e:	d8f1      	bhi.n	8001e24 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b2db      	uxtb	r3, r3
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e046      	b.n	8001ef8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2288      	movs	r2, #136	@ 0x88
 8001e6e:	589b      	ldr	r3, [r3, r2]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d107      	bne.n	8001e84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2284      	movs	r2, #132	@ 0x84
 8001e78:	2100      	movs	r1, #0
 8001e7a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7fe fc8a 	bl	8000798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2288      	movs	r2, #136	@ 0x88
 8001e88:	2124      	movs	r1, #36	@ 0x24
 8001e8a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2101      	movs	r1, #1
 8001e98:	438a      	bics	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 fb34 	bl	8002514 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 f9b2 	bl	8002218 <UART_SetConfig>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01c      	b.n	8001ef8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	490d      	ldr	r1, [pc, #52]	@ (8001f00 <HAL_UART_Init+0xa8>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	212a      	movs	r1, #42	@ 0x2a
 8001eda:	438a      	bics	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f000 fbc3 	bl	800267c <UART_CheckIdleState>
 8001ef6:	0003      	movs	r3, r0
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b002      	add	sp, #8
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	ffffb7ff 	.word	0xffffb7ff

08001f04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	@ 0x28
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	1dbb      	adds	r3, r7, #6
 8001f12:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2288      	movs	r2, #136	@ 0x88
 8001f18:	589b      	ldr	r3, [r3, r2]
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d000      	beq.n	8001f20 <HAL_UART_Transmit+0x1c>
 8001f1e:	e090      	b.n	8002042 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_UART_Transmit+0x2a>
 8001f26:	1dbb      	adds	r3, r7, #6
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e088      	b.n	8002044 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	2380      	movs	r3, #128	@ 0x80
 8001f38:	015b      	lsls	r3, r3, #5
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d109      	bne.n	8001f52 <HAL_UART_Transmit+0x4e>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d001      	beq.n	8001f52 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e078      	b.n	8002044 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2290      	movs	r2, #144	@ 0x90
 8001f56:	2100      	movs	r1, #0
 8001f58:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2288      	movs	r2, #136	@ 0x88
 8001f5e:	2121      	movs	r1, #33	@ 0x21
 8001f60:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f62:	f7fe fd29 	bl	80009b8 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1dba      	adds	r2, r7, #6
 8001f6e:	2154      	movs	r1, #84	@ 0x54
 8001f70:	8812      	ldrh	r2, [r2, #0]
 8001f72:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1dba      	adds	r2, r7, #6
 8001f78:	2156      	movs	r1, #86	@ 0x56
 8001f7a:	8812      	ldrh	r2, [r2, #0]
 8001f7c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	015b      	lsls	r3, r3, #5
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d108      	bne.n	8001f9c <HAL_UART_Transmit+0x98>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d104      	bne.n	8001f9c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	e003      	b.n	8001fa4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fa4:	e030      	b.n	8002008 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	0013      	movs	r3, r2
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2180      	movs	r1, #128	@ 0x80
 8001fb4:	f000 fc0c 	bl	80027d0 <UART_WaitOnFlagUntilTimeout>
 8001fb8:	1e03      	subs	r3, r0, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2288      	movs	r2, #136	@ 0x88
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e03d      	b.n	8002044 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	001a      	movs	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	05d2      	lsls	r2, r2, #23
 8001fda:	0dd2      	lsrs	r2, r2, #23
 8001fdc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	e007      	b.n	8001ff6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2256      	movs	r2, #86	@ 0x56
 8001ffa:	5a9b      	ldrh	r3, [r3, r2]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b299      	uxth	r1, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2256      	movs	r2, #86	@ 0x56
 8002006:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2256      	movs	r2, #86	@ 0x56
 800200c:	5a9b      	ldrh	r3, [r3, r2]
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1c8      	bne.n	8001fa6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	0013      	movs	r3, r2
 800201e:	2200      	movs	r2, #0
 8002020:	2140      	movs	r1, #64	@ 0x40
 8002022:	f000 fbd5 	bl	80027d0 <UART_WaitOnFlagUntilTimeout>
 8002026:	1e03      	subs	r3, r0, #0
 8002028:	d005      	beq.n	8002036 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2288      	movs	r2, #136	@ 0x88
 800202e:	2120      	movs	r1, #32
 8002030:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e006      	b.n	8002044 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2288      	movs	r2, #136	@ 0x88
 800203a:	2120      	movs	r1, #32
 800203c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002042:	2302      	movs	r3, #2
  }
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b008      	add	sp, #32
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	@ 0x28
 8002050:	af02      	add	r7, sp, #8
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	1dbb      	adds	r3, r7, #6
 800205a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	228c      	movs	r2, #140	@ 0x8c
 8002060:	589b      	ldr	r3, [r3, r2]
 8002062:	2b20      	cmp	r3, #32
 8002064:	d000      	beq.n	8002068 <HAL_UART_Receive+0x1c>
 8002066:	e0d0      	b.n	800220a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_UART_Receive+0x2a>
 800206e:	1dbb      	adds	r3, r7, #6
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0c8      	b.n	800220c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	015b      	lsls	r3, r3, #5
 8002082:	429a      	cmp	r2, r3
 8002084:	d109      	bne.n	800209a <HAL_UART_Receive+0x4e>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d105      	bne.n	800209a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2201      	movs	r2, #1
 8002092:	4013      	ands	r3, r2
 8002094:	d001      	beq.n	800209a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e0b8      	b.n	800220c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2290      	movs	r2, #144	@ 0x90
 800209e:	2100      	movs	r1, #0
 80020a0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	228c      	movs	r2, #140	@ 0x8c
 80020a6:	2122      	movs	r1, #34	@ 0x22
 80020a8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020b0:	f7fe fc82 	bl	80009b8 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1dba      	adds	r2, r7, #6
 80020bc:	215c      	movs	r1, #92	@ 0x5c
 80020be:	8812      	ldrh	r2, [r2, #0]
 80020c0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1dba      	adds	r2, r7, #6
 80020c6:	215e      	movs	r1, #94	@ 0x5e
 80020c8:	8812      	ldrh	r2, [r2, #0]
 80020ca:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	015b      	lsls	r3, r3, #5
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d10d      	bne.n	80020f4 <HAL_UART_Receive+0xa8>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d104      	bne.n	80020ea <HAL_UART_Receive+0x9e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2260      	movs	r2, #96	@ 0x60
 80020e4:	494b      	ldr	r1, [pc, #300]	@ (8002214 <HAL_UART_Receive+0x1c8>)
 80020e6:	5299      	strh	r1, [r3, r2]
 80020e8:	e02e      	b.n	8002148 <HAL_UART_Receive+0xfc>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2260      	movs	r2, #96	@ 0x60
 80020ee:	21ff      	movs	r1, #255	@ 0xff
 80020f0:	5299      	strh	r1, [r3, r2]
 80020f2:	e029      	b.n	8002148 <HAL_UART_Receive+0xfc>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10d      	bne.n	8002118 <HAL_UART_Receive+0xcc>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d104      	bne.n	800210e <HAL_UART_Receive+0xc2>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2260      	movs	r2, #96	@ 0x60
 8002108:	21ff      	movs	r1, #255	@ 0xff
 800210a:	5299      	strh	r1, [r3, r2]
 800210c:	e01c      	b.n	8002148 <HAL_UART_Receive+0xfc>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2260      	movs	r2, #96	@ 0x60
 8002112:	217f      	movs	r1, #127	@ 0x7f
 8002114:	5299      	strh	r1, [r3, r2]
 8002116:	e017      	b.n	8002148 <HAL_UART_Receive+0xfc>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	2380      	movs	r3, #128	@ 0x80
 800211e:	055b      	lsls	r3, r3, #21
 8002120:	429a      	cmp	r2, r3
 8002122:	d10d      	bne.n	8002140 <HAL_UART_Receive+0xf4>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d104      	bne.n	8002136 <HAL_UART_Receive+0xea>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2260      	movs	r2, #96	@ 0x60
 8002130:	217f      	movs	r1, #127	@ 0x7f
 8002132:	5299      	strh	r1, [r3, r2]
 8002134:	e008      	b.n	8002148 <HAL_UART_Receive+0xfc>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2260      	movs	r2, #96	@ 0x60
 800213a:	213f      	movs	r1, #63	@ 0x3f
 800213c:	5299      	strh	r1, [r3, r2]
 800213e:	e003      	b.n	8002148 <HAL_UART_Receive+0xfc>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2260      	movs	r2, #96	@ 0x60
 8002144:	2100      	movs	r1, #0
 8002146:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002148:	2312      	movs	r3, #18
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	2160      	movs	r1, #96	@ 0x60
 8002150:	5a52      	ldrh	r2, [r2, r1]
 8002152:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	2380      	movs	r3, #128	@ 0x80
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	429a      	cmp	r2, r3
 800215e:	d108      	bne.n	8002172 <HAL_UART_Receive+0x126>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	e003      	b.n	800217a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800217a:	e03a      	b.n	80021f2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	0013      	movs	r3, r2
 8002186:	2200      	movs	r2, #0
 8002188:	2120      	movs	r1, #32
 800218a:	f000 fb21 	bl	80027d0 <UART_WaitOnFlagUntilTimeout>
 800218e:	1e03      	subs	r3, r0, #0
 8002190:	d005      	beq.n	800219e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	228c      	movs	r2, #140	@ 0x8c
 8002196:	2120      	movs	r1, #32
 8002198:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e036      	b.n	800220c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10e      	bne.n	80021c2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2212      	movs	r2, #18
 80021ae:	18ba      	adds	r2, r7, r2
 80021b0:	8812      	ldrh	r2, [r2, #0]
 80021b2:	4013      	ands	r3, r2
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	3302      	adds	r3, #2
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	e00e      	b.n	80021e0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2212      	movs	r2, #18
 80021cc:	18ba      	adds	r2, r7, r2
 80021ce:	8812      	ldrh	r2, [r2, #0]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	4013      	ands	r3, r2
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	225e      	movs	r2, #94	@ 0x5e
 80021e4:	5a9b      	ldrh	r3, [r3, r2]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b299      	uxth	r1, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	225e      	movs	r2, #94	@ 0x5e
 80021f0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	225e      	movs	r2, #94	@ 0x5e
 80021f6:	5a9b      	ldrh	r3, [r3, r2]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1be      	bne.n	800217c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	228c      	movs	r2, #140	@ 0x8c
 8002202:	2120      	movs	r1, #32
 8002204:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
  }
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b008      	add	sp, #32
 8002212:	bd80      	pop	{r7, pc}
 8002214:	000001ff 	.word	0x000001ff

08002218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002220:	231e      	movs	r3, #30
 8002222:	18fb      	adds	r3, r7, r3
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4aab      	ldr	r2, [pc, #684]	@ (80024f4 <UART_SetConfig+0x2dc>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4aa6      	ldr	r2, [pc, #664]	@ (80024f8 <UART_SetConfig+0x2e0>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4313      	orrs	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	4a9d      	ldr	r2, [pc, #628]	@ (80024fc <UART_SetConfig+0x2e4>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229a:	220f      	movs	r2, #15
 800229c:	4393      	bics	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a93      	ldr	r2, [pc, #588]	@ (8002500 <UART_SetConfig+0x2e8>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d127      	bne.n	8002306 <UART_SetConfig+0xee>
 80022b6:	4b93      	ldr	r3, [pc, #588]	@ (8002504 <UART_SetConfig+0x2ec>)
 80022b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ba:	2203      	movs	r2, #3
 80022bc:	4013      	ands	r3, r2
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d017      	beq.n	80022f2 <UART_SetConfig+0xda>
 80022c2:	d81b      	bhi.n	80022fc <UART_SetConfig+0xe4>
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d00a      	beq.n	80022de <UART_SetConfig+0xc6>
 80022c8:	d818      	bhi.n	80022fc <UART_SetConfig+0xe4>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <UART_SetConfig+0xbc>
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d00a      	beq.n	80022e8 <UART_SetConfig+0xd0>
 80022d2:	e013      	b.n	80022fc <UART_SetConfig+0xe4>
 80022d4:	231f      	movs	r3, #31
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e021      	b.n	8002322 <UART_SetConfig+0x10a>
 80022de:	231f      	movs	r3, #31
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2202      	movs	r2, #2
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e01c      	b.n	8002322 <UART_SetConfig+0x10a>
 80022e8:	231f      	movs	r3, #31
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2204      	movs	r2, #4
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e017      	b.n	8002322 <UART_SetConfig+0x10a>
 80022f2:	231f      	movs	r3, #31
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	2208      	movs	r2, #8
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e012      	b.n	8002322 <UART_SetConfig+0x10a>
 80022fc:	231f      	movs	r3, #31
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	2210      	movs	r2, #16
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	e00d      	b.n	8002322 <UART_SetConfig+0x10a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a7f      	ldr	r2, [pc, #508]	@ (8002508 <UART_SetConfig+0x2f0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d104      	bne.n	800231a <UART_SetConfig+0x102>
 8002310:	231f      	movs	r3, #31
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	e003      	b.n	8002322 <UART_SetConfig+0x10a>
 800231a:	231f      	movs	r3, #31
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	2210      	movs	r2, #16
 8002320:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	429a      	cmp	r2, r3
 800232c:	d000      	beq.n	8002330 <UART_SetConfig+0x118>
 800232e:	e06f      	b.n	8002410 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002330:	231f      	movs	r3, #31
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b08      	cmp	r3, #8
 8002338:	d01f      	beq.n	800237a <UART_SetConfig+0x162>
 800233a:	dc22      	bgt.n	8002382 <UART_SetConfig+0x16a>
 800233c:	2b04      	cmp	r3, #4
 800233e:	d017      	beq.n	8002370 <UART_SetConfig+0x158>
 8002340:	dc1f      	bgt.n	8002382 <UART_SetConfig+0x16a>
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <UART_SetConfig+0x134>
 8002346:	2b02      	cmp	r3, #2
 8002348:	d005      	beq.n	8002356 <UART_SetConfig+0x13e>
 800234a:	e01a      	b.n	8002382 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800234c:	f7ff f8de 	bl	800150c <HAL_RCC_GetPCLK1Freq>
 8002350:	0003      	movs	r3, r0
 8002352:	61bb      	str	r3, [r7, #24]
        break;
 8002354:	e01c      	b.n	8002390 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002356:	4b6b      	ldr	r3, [pc, #428]	@ (8002504 <UART_SetConfig+0x2ec>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2207      	movs	r2, #7
 800235e:	4013      	ands	r3, r2
 8002360:	3301      	adds	r3, #1
 8002362:	0019      	movs	r1, r3
 8002364:	4869      	ldr	r0, [pc, #420]	@ (800250c <UART_SetConfig+0x2f4>)
 8002366:	f7fd fed7 	bl	8000118 <__udivsi3>
 800236a:	0003      	movs	r3, r0
 800236c:	61bb      	str	r3, [r7, #24]
        break;
 800236e:	e00f      	b.n	8002390 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002370:	f7ff f880 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 8002374:	0003      	movs	r3, r0
 8002376:	61bb      	str	r3, [r7, #24]
        break;
 8002378:	e00a      	b.n	8002390 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	61bb      	str	r3, [r7, #24]
        break;
 8002380:	e006      	b.n	8002390 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002386:	231e      	movs	r3, #30
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
        break;
 800238e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d100      	bne.n	8002398 <UART_SetConfig+0x180>
 8002396:	e097      	b.n	80024c8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800239c:	4b5c      	ldr	r3, [pc, #368]	@ (8002510 <UART_SetConfig+0x2f8>)
 800239e:	0052      	lsls	r2, r2, #1
 80023a0:	5ad3      	ldrh	r3, [r2, r3]
 80023a2:	0019      	movs	r1, r3
 80023a4:	69b8      	ldr	r0, [r7, #24]
 80023a6:	f7fd feb7 	bl	8000118 <__udivsi3>
 80023aa:	0003      	movs	r3, r0
 80023ac:	005a      	lsls	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	085b      	lsrs	r3, r3, #1
 80023b4:	18d2      	adds	r2, r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	0019      	movs	r1, r3
 80023bc:	0010      	movs	r0, r2
 80023be:	f7fd feab 	bl	8000118 <__udivsi3>
 80023c2:	0003      	movs	r3, r0
 80023c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b0f      	cmp	r3, #15
 80023ca:	d91c      	bls.n	8002406 <UART_SetConfig+0x1ee>
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	025b      	lsls	r3, r3, #9
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d217      	bcs.n	8002406 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	200e      	movs	r0, #14
 80023dc:	183b      	adds	r3, r7, r0
 80023de:	210f      	movs	r1, #15
 80023e0:	438a      	bics	r2, r1
 80023e2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	085b      	lsrs	r3, r3, #1
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2207      	movs	r2, #7
 80023ec:	4013      	ands	r3, r2
 80023ee:	b299      	uxth	r1, r3
 80023f0:	183b      	adds	r3, r7, r0
 80023f2:	183a      	adds	r2, r7, r0
 80023f4:	8812      	ldrh	r2, [r2, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	183a      	adds	r2, r7, r0
 8002400:	8812      	ldrh	r2, [r2, #0]
 8002402:	60da      	str	r2, [r3, #12]
 8002404:	e060      	b.n	80024c8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002406:	231e      	movs	r3, #30
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e05b      	b.n	80024c8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002410:	231f      	movs	r3, #31
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d01f      	beq.n	800245a <UART_SetConfig+0x242>
 800241a:	dc22      	bgt.n	8002462 <UART_SetConfig+0x24a>
 800241c:	2b04      	cmp	r3, #4
 800241e:	d017      	beq.n	8002450 <UART_SetConfig+0x238>
 8002420:	dc1f      	bgt.n	8002462 <UART_SetConfig+0x24a>
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <UART_SetConfig+0x214>
 8002426:	2b02      	cmp	r3, #2
 8002428:	d005      	beq.n	8002436 <UART_SetConfig+0x21e>
 800242a:	e01a      	b.n	8002462 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800242c:	f7ff f86e 	bl	800150c <HAL_RCC_GetPCLK1Freq>
 8002430:	0003      	movs	r3, r0
 8002432:	61bb      	str	r3, [r7, #24]
        break;
 8002434:	e01c      	b.n	8002470 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002436:	4b33      	ldr	r3, [pc, #204]	@ (8002504 <UART_SetConfig+0x2ec>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2207      	movs	r2, #7
 800243e:	4013      	ands	r3, r2
 8002440:	3301      	adds	r3, #1
 8002442:	0019      	movs	r1, r3
 8002444:	4831      	ldr	r0, [pc, #196]	@ (800250c <UART_SetConfig+0x2f4>)
 8002446:	f7fd fe67 	bl	8000118 <__udivsi3>
 800244a:	0003      	movs	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]
        break;
 800244e:	e00f      	b.n	8002470 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002450:	f7ff f810 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 8002454:	0003      	movs	r3, r0
 8002456:	61bb      	str	r3, [r7, #24]
        break;
 8002458:	e00a      	b.n	8002470 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800245a:	2380      	movs	r3, #128	@ 0x80
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	61bb      	str	r3, [r7, #24]
        break;
 8002460:	e006      	b.n	8002470 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002466:	231e      	movs	r3, #30
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
        break;
 800246e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d028      	beq.n	80024c8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800247a:	4b25      	ldr	r3, [pc, #148]	@ (8002510 <UART_SetConfig+0x2f8>)
 800247c:	0052      	lsls	r2, r2, #1
 800247e:	5ad3      	ldrh	r3, [r2, r3]
 8002480:	0019      	movs	r1, r3
 8002482:	69b8      	ldr	r0, [r7, #24]
 8002484:	f7fd fe48 	bl	8000118 <__udivsi3>
 8002488:	0003      	movs	r3, r0
 800248a:	001a      	movs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	18d2      	adds	r2, r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	0019      	movs	r1, r3
 800249a:	0010      	movs	r0, r2
 800249c:	f7fd fe3c 	bl	8000118 <__udivsi3>
 80024a0:	0003      	movs	r3, r0
 80024a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	d90a      	bls.n	80024c0 <UART_SetConfig+0x2a8>
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	2380      	movs	r3, #128	@ 0x80
 80024ae:	025b      	lsls	r3, r3, #9
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d205      	bcs.n	80024c0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	e003      	b.n	80024c8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80024c0:	231e      	movs	r3, #30
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	226a      	movs	r2, #106	@ 0x6a
 80024cc:	2101      	movs	r1, #1
 80024ce:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2268      	movs	r2, #104	@ 0x68
 80024d4:	2101      	movs	r1, #1
 80024d6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80024e4:	231e      	movs	r3, #30
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
}
 80024ea:	0018      	movs	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	b008      	add	sp, #32
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	cfff69f3 	.word	0xcfff69f3
 80024f8:	ffffcfff 	.word	0xffffcfff
 80024fc:	11fff4ff 	.word	0x11fff4ff
 8002500:	40013800 	.word	0x40013800
 8002504:	40021000 	.word	0x40021000
 8002508:	40004400 	.word	0x40004400
 800250c:	02dc6c00 	.word	0x02dc6c00
 8002510:	08002bec 	.word	0x08002bec

08002514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	2208      	movs	r2, #8
 8002522:	4013      	ands	r3, r2
 8002524:	d00b      	beq.n	800253e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a4a      	ldr	r2, [pc, #296]	@ (8002658 <UART_AdvFeatureConfig+0x144>)
 800252e:	4013      	ands	r3, r2
 8002530:	0019      	movs	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002542:	2201      	movs	r2, #1
 8002544:	4013      	ands	r3, r2
 8002546:	d00b      	beq.n	8002560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4a43      	ldr	r2, [pc, #268]	@ (800265c <UART_AdvFeatureConfig+0x148>)
 8002550:	4013      	ands	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	2202      	movs	r2, #2
 8002566:	4013      	ands	r3, r2
 8002568:	d00b      	beq.n	8002582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4a3b      	ldr	r2, [pc, #236]	@ (8002660 <UART_AdvFeatureConfig+0x14c>)
 8002572:	4013      	ands	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002586:	2204      	movs	r2, #4
 8002588:	4013      	ands	r3, r2
 800258a:	d00b      	beq.n	80025a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4a34      	ldr	r2, [pc, #208]	@ (8002664 <UART_AdvFeatureConfig+0x150>)
 8002594:	4013      	ands	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	2210      	movs	r2, #16
 80025aa:	4013      	ands	r3, r2
 80025ac:	d00b      	beq.n	80025c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002668 <UART_AdvFeatureConfig+0x154>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ca:	2220      	movs	r2, #32
 80025cc:	4013      	ands	r3, r2
 80025ce:	d00b      	beq.n	80025e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	4a25      	ldr	r2, [pc, #148]	@ (800266c <UART_AdvFeatureConfig+0x158>)
 80025d8:	4013      	ands	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ec:	2240      	movs	r2, #64	@ 0x40
 80025ee:	4013      	ands	r3, r2
 80025f0:	d01d      	beq.n	800262e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002670 <UART_AdvFeatureConfig+0x15c>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	035b      	lsls	r3, r3, #13
 8002612:	429a      	cmp	r2, r3
 8002614:	d10b      	bne.n	800262e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <UART_AdvFeatureConfig+0x160>)
 800261e:	4013      	ands	r3, r2
 8002620:	0019      	movs	r1, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002632:	2280      	movs	r2, #128	@ 0x80
 8002634:	4013      	ands	r3, r2
 8002636:	d00b      	beq.n	8002650 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a0e      	ldr	r2, [pc, #56]	@ (8002678 <UART_AdvFeatureConfig+0x164>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
  }
}
 8002650:	46c0      	nop			@ (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b002      	add	sp, #8
 8002656:	bd80      	pop	{r7, pc}
 8002658:	ffff7fff 	.word	0xffff7fff
 800265c:	fffdffff 	.word	0xfffdffff
 8002660:	fffeffff 	.word	0xfffeffff
 8002664:	fffbffff 	.word	0xfffbffff
 8002668:	ffffefff 	.word	0xffffefff
 800266c:	ffffdfff 	.word	0xffffdfff
 8002670:	ffefffff 	.word	0xffefffff
 8002674:	ff9fffff 	.word	0xff9fffff
 8002678:	fff7ffff 	.word	0xfff7ffff

0800267c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b092      	sub	sp, #72	@ 0x48
 8002680:	af02      	add	r7, sp, #8
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2290      	movs	r2, #144	@ 0x90
 8002688:	2100      	movs	r1, #0
 800268a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800268c:	f7fe f994 	bl	80009b8 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2208      	movs	r2, #8
 800269c:	4013      	ands	r3, r2
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d12d      	bne.n	80026fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026a4:	2280      	movs	r2, #128	@ 0x80
 80026a6:	0391      	lsls	r1, r2, #14
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	4a47      	ldr	r2, [pc, #284]	@ (80027c8 <UART_CheckIdleState+0x14c>)
 80026ac:	9200      	str	r2, [sp, #0]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f000 f88e 	bl	80027d0 <UART_WaitOnFlagUntilTimeout>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d022      	beq.n	80026fe <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026b8:	f3ef 8310 	mrs	r3, PRIMASK
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80026c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026c2:	2301      	movs	r3, #1
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c8:	f383 8810 	msr	PRIMASK, r3
}
 80026cc:	46c0      	nop			@ (mov r8, r8)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2180      	movs	r1, #128	@ 0x80
 80026da:	438a      	bics	r2, r1
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026e4:	f383 8810 	msr	PRIMASK, r3
}
 80026e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2288      	movs	r2, #136	@ 0x88
 80026ee:	2120      	movs	r1, #32
 80026f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2284      	movs	r2, #132	@ 0x84
 80026f6:	2100      	movs	r1, #0
 80026f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e060      	b.n	80027c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2204      	movs	r2, #4
 8002706:	4013      	ands	r3, r2
 8002708:	2b04      	cmp	r3, #4
 800270a:	d146      	bne.n	800279a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800270c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800270e:	2280      	movs	r2, #128	@ 0x80
 8002710:	03d1      	lsls	r1, r2, #15
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4a2c      	ldr	r2, [pc, #176]	@ (80027c8 <UART_CheckIdleState+0x14c>)
 8002716:	9200      	str	r2, [sp, #0]
 8002718:	2200      	movs	r2, #0
 800271a:	f000 f859 	bl	80027d0 <UART_WaitOnFlagUntilTimeout>
 800271e:	1e03      	subs	r3, r0, #0
 8002720:	d03b      	beq.n	800279a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002722:	f3ef 8310 	mrs	r3, PRIMASK
 8002726:	60fb      	str	r3, [r7, #12]
  return(result);
 8002728:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800272a:	637b      	str	r3, [r7, #52]	@ 0x34
 800272c:	2301      	movs	r3, #1
 800272e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f383 8810 	msr	PRIMASK, r3
}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4922      	ldr	r1, [pc, #136]	@ (80027cc <UART_CheckIdleState+0x150>)
 8002744:	400a      	ands	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800274a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f383 8810 	msr	PRIMASK, r3
}
 8002752:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002754:	f3ef 8310 	mrs	r3, PRIMASK
 8002758:	61bb      	str	r3, [r7, #24]
  return(result);
 800275a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275c:	633b      	str	r3, [r7, #48]	@ 0x30
 800275e:	2301      	movs	r3, #1
 8002760:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f383 8810 	msr	PRIMASK, r3
}
 8002768:	46c0      	nop			@ (mov r8, r8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2101      	movs	r1, #1
 8002776:	438a      	bics	r2, r1
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	228c      	movs	r2, #140	@ 0x8c
 800278a:	2120      	movs	r1, #32
 800278c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2284      	movs	r2, #132	@ 0x84
 8002792:	2100      	movs	r1, #0
 8002794:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e012      	b.n	80027c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2288      	movs	r2, #136	@ 0x88
 800279e:	2120      	movs	r1, #32
 80027a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	228c      	movs	r2, #140	@ 0x8c
 80027a6:	2120      	movs	r1, #32
 80027a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2284      	movs	r2, #132	@ 0x84
 80027ba:	2100      	movs	r1, #0
 80027bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b010      	add	sp, #64	@ 0x40
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	01ffffff 	.word	0x01ffffff
 80027cc:	fffffedf 	.word	0xfffffedf

080027d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	1dfb      	adds	r3, r7, #7
 80027de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027e0:	e04b      	b.n	800287a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	3301      	adds	r3, #1
 80027e6:	d048      	beq.n	800287a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e8:	f7fe f8e6 	bl	80009b8 <HAL_GetTick>
 80027ec:	0002      	movs	r2, r0
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d302      	bcc.n	80027fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e04b      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2204      	movs	r2, #4
 800280a:	4013      	ands	r3, r2
 800280c:	d035      	beq.n	800287a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	2208      	movs	r2, #8
 8002816:	4013      	ands	r3, r2
 8002818:	2b08      	cmp	r3, #8
 800281a:	d111      	bne.n	8002840 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2208      	movs	r2, #8
 8002822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	0018      	movs	r0, r3
 8002828:	f000 f83c 	bl	80028a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2290      	movs	r2, #144	@ 0x90
 8002830:	2108      	movs	r1, #8
 8002832:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2284      	movs	r2, #132	@ 0x84
 8002838:	2100      	movs	r1, #0
 800283a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e02c      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	2380      	movs	r3, #128	@ 0x80
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	401a      	ands	r2, r3
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	429a      	cmp	r2, r3
 8002852:	d112      	bne.n	800287a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2280      	movs	r2, #128	@ 0x80
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	0018      	movs	r0, r3
 8002862:	f000 f81f 	bl	80028a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2290      	movs	r2, #144	@ 0x90
 800286a:	2120      	movs	r1, #32
 800286c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2284      	movs	r2, #132	@ 0x84
 8002872:	2100      	movs	r1, #0
 8002874:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e00f      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	425a      	negs	r2, r3
 800288a:	4153      	adcs	r3, r2
 800288c:	b2db      	uxtb	r3, r3
 800288e:	001a      	movs	r2, r3
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d0a4      	beq.n	80027e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b004      	add	sp, #16
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08e      	sub	sp, #56	@ 0x38
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028ac:	f3ef 8310 	mrs	r3, PRIMASK
 80028b0:	617b      	str	r3, [r7, #20]
  return(result);
 80028b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028b6:	2301      	movs	r3, #1
 80028b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	f383 8810 	msr	PRIMASK, r3
}
 80028c0:	46c0      	nop			@ (mov r8, r8)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4926      	ldr	r1, [pc, #152]	@ (8002968 <UART_EndRxTransfer+0xc4>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f383 8810 	msr	PRIMASK, r3
}
 80028dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028de:	f3ef 8310 	mrs	r3, PRIMASK
 80028e2:	623b      	str	r3, [r7, #32]
  return(result);
 80028e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80028e8:	2301      	movs	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	f383 8810 	msr	PRIMASK, r3
}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	491b      	ldr	r1, [pc, #108]	@ (800296c <UART_EndRxTransfer+0xc8>)
 8002900:	400a      	ands	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002906:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	f383 8810 	msr	PRIMASK, r3
}
 800290e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d118      	bne.n	800294a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002918:	f3ef 8310 	mrs	r3, PRIMASK
 800291c:	60bb      	str	r3, [r7, #8]
  return(result);
 800291e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002922:	2301      	movs	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f383 8810 	msr	PRIMASK, r3
}
 800292c:	46c0      	nop			@ (mov r8, r8)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2110      	movs	r1, #16
 800293a:	438a      	bics	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002940:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f383 8810 	msr	PRIMASK, r3
}
 8002948:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	228c      	movs	r2, #140	@ 0x8c
 800294e:	2120      	movs	r1, #32
 8002950:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b00e      	add	sp, #56	@ 0x38
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	fffffedf 	.word	0xfffffedf
 800296c:	effffffe 	.word	0xeffffffe

08002970 <memset>:
 8002970:	0003      	movs	r3, r0
 8002972:	1882      	adds	r2, r0, r2
 8002974:	4293      	cmp	r3, r2
 8002976:	d100      	bne.n	800297a <memset+0xa>
 8002978:	4770      	bx	lr
 800297a:	7019      	strb	r1, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	e7f9      	b.n	8002974 <memset+0x4>

08002980 <strstr>:
 8002980:	780a      	ldrb	r2, [r1, #0]
 8002982:	b530      	push	{r4, r5, lr}
 8002984:	2a00      	cmp	r2, #0
 8002986:	d10c      	bne.n	80029a2 <strstr+0x22>
 8002988:	bd30      	pop	{r4, r5, pc}
 800298a:	429a      	cmp	r2, r3
 800298c:	d108      	bne.n	80029a0 <strstr+0x20>
 800298e:	2301      	movs	r3, #1
 8002990:	5ccc      	ldrb	r4, [r1, r3]
 8002992:	2c00      	cmp	r4, #0
 8002994:	d0f8      	beq.n	8002988 <strstr+0x8>
 8002996:	5cc5      	ldrb	r5, [r0, r3]
 8002998:	42a5      	cmp	r5, r4
 800299a:	d101      	bne.n	80029a0 <strstr+0x20>
 800299c:	3301      	adds	r3, #1
 800299e:	e7f7      	b.n	8002990 <strstr+0x10>
 80029a0:	3001      	adds	r0, #1
 80029a2:	7803      	ldrb	r3, [r0, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <strstr+0xa>
 80029a8:	0018      	movs	r0, r3
 80029aa:	e7ed      	b.n	8002988 <strstr+0x8>

080029ac <__libc_init_array>:
 80029ac:	b570      	push	{r4, r5, r6, lr}
 80029ae:	2600      	movs	r6, #0
 80029b0:	4c0c      	ldr	r4, [pc, #48]	@ (80029e4 <__libc_init_array+0x38>)
 80029b2:	4d0d      	ldr	r5, [pc, #52]	@ (80029e8 <__libc_init_array+0x3c>)
 80029b4:	1b64      	subs	r4, r4, r5
 80029b6:	10a4      	asrs	r4, r4, #2
 80029b8:	42a6      	cmp	r6, r4
 80029ba:	d109      	bne.n	80029d0 <__libc_init_array+0x24>
 80029bc:	2600      	movs	r6, #0
 80029be:	f000 f819 	bl	80029f4 <_init>
 80029c2:	4c0a      	ldr	r4, [pc, #40]	@ (80029ec <__libc_init_array+0x40>)
 80029c4:	4d0a      	ldr	r5, [pc, #40]	@ (80029f0 <__libc_init_array+0x44>)
 80029c6:	1b64      	subs	r4, r4, r5
 80029c8:	10a4      	asrs	r4, r4, #2
 80029ca:	42a6      	cmp	r6, r4
 80029cc:	d105      	bne.n	80029da <__libc_init_array+0x2e>
 80029ce:	bd70      	pop	{r4, r5, r6, pc}
 80029d0:	00b3      	lsls	r3, r6, #2
 80029d2:	58eb      	ldr	r3, [r5, r3]
 80029d4:	4798      	blx	r3
 80029d6:	3601      	adds	r6, #1
 80029d8:	e7ee      	b.n	80029b8 <__libc_init_array+0xc>
 80029da:	00b3      	lsls	r3, r6, #2
 80029dc:	58eb      	ldr	r3, [r5, r3]
 80029de:	4798      	blx	r3
 80029e0:	3601      	adds	r6, #1
 80029e2:	e7f2      	b.n	80029ca <__libc_init_array+0x1e>
 80029e4:	08002c04 	.word	0x08002c04
 80029e8:	08002c04 	.word	0x08002c04
 80029ec:	08002c08 	.word	0x08002c08
 80029f0:	08002c04 	.word	0x08002c04

080029f4 <_init>:
 80029f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029fa:	bc08      	pop	{r3}
 80029fc:	469e      	mov	lr, r3
 80029fe:	4770      	bx	lr

08002a00 <_fini>:
 8002a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a06:	bc08      	pop	{r3}
 8002a08:	469e      	mov	lr, r3
 8002a0a:	4770      	bx	lr
